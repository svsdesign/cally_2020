{"version":3,"sources":["app.admin.min.js"],"names":["domReady","fn","document","readyState","addEventListener","orientation","console","log","winwidth","$","window","width","height","addClass","removeClass","opacity","imagesLoaded","setTimeout","adminapp","init"],"mappings":";;;;;;;;;AAAA,SAASA,SAASC,GAA6B,YAAtBC,SAASC,WAAqCD,SAASE,iBAAiB,mBAAmBH,GAA1DA,IAA+D,SAASI,cAAcC,QAAQC,IAAI,8BAA8B,IAAIC,EAASC,EAAEC,QAAQC,QAAsBF,EAAEC,QAAQE,SAAYJ,GAAoBC,EAAE,QAAQI,SAAS,cAAcJ,EAAE,QAAQK,YAAY,cAAkBL,EAAE,QAAQK,YAAY,cAAcL,EAAE,QAAQI,SAAS,aAAc,SAASE,UAAUN,EAAE,QAAQO,aAAa,WAAgEC,WAArD,WAAuBR,EAAE,QAAQI,SAAS,WAAkC,OAEhiB,IAAIK,SAAS,CAACC,KAAK,WAAgBb,QAAQC,IAAI,cAAcQ,UAAUV,gBAAiBL,SAASkB,SAASC","file":"app.admin.min.js","sourcesContent":["function domReady(fn){if(document.readyState!=='loading'){fn();return;}document.addEventListener('DOMContentLoaded',fn);}function orientation(){console.log(\"hello orientation function\");var winwidth=$(window).width();var winheight=$(window).height();if(winwidth>winheight){$(\"body\").addClass('horizontal');$(\"body\").removeClass('vertical');}else{$(\"body\").removeClass('horizontal');$(\"body\").addClass('vertical');}}function opacity(){$(\"body\").imagesLoaded(function(){function waitloading(){$(\"body\").addClass('loaded');}setTimeout(waitloading,200);});}\n\nvar adminapp={init:function init(){console.log(\"Admin App \");opacity();orientation();}};domReady(adminapp.init);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbnZhbnN0aXByaWFhbi9TaXRlcy9jYWxseS0yMDIwL3dwLWNvbnRlbnQvdGhlbWVzL2NhbGx5XzIwMjAvc3JjL2pzL3V0aWxpdGllcy9oZWxwZXJzLmpzIiwiL1VzZXJzL3NpbW9udmFuc3RpcHJpYWFuL1NpdGVzL2NhbGx5LTIwMjAvd3AtY29udGVudC90aGVtZXMvY2FsbHlfMjAyMC9zcmMvanMvYXBwLmFkbWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGZ1bmN0aW9uIGRvbVJlYWR5KGZuKSB7XG4gIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSAnbG9hZGluZycpIHtcbiAgICBmbigpO1xuICAgIHJldHVybjtcbiAgfVxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZm4pO1xufS8vZG9tUmVhZHkoZm4pXG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RUb3VjaCgpe1xuY29uc29sZS5sb2coXCJkZXRlY3RUb3VjaCgpO1wiKVxuXG4gIC8vaHR0cHM6Ly9tZWRpdW0uY29tL0BkYXZpZC5naWxiZXJ0c29uL3RoZS1vbmx5LXdheS10by1kZXRlY3QtdG91Y2gtd2l0aC1qYXZhc2NyaXB0LTc3OTFhMzM0NjY4NVxuICAvLyB0ZXN0IHRoaXMgb24gSUUgLSByZWFkIHRoZSBjb21tZW50cyBpbiB0aGUgYXJ0aWNsZSBSRSBpc3N1ZXNcbiAgLy9odHRwczovL2dpc3QuZ2l0aHViLmNvbS9hZGJhcmlvLzRlMzNiMDdkNjE4ZDQ5OWNkODFlYjY5MWM3NDZiNDdlI2ZpbGUtanF1ZXJ5LXRvdWNoLWRldGVjdC1qc1xuICAvL2h0dHBzOi8vcGF0cmlja2hsYXVrZS5naXRodWIuaW8vdG91Y2gvdGVzdHMvdG91Y2gtZmVhdHVyZS1kZXRlY3QuaHRtbFxuICAvL2h0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIxMDU0MTI2L2hvdy10by1kZXRlY3QtaWYtYS1kZXZpY2UtaGFzLW1vdXNlLXN1cHBvcnRcbiAgLy9odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80ODE3MDI5L3doYXRzLXRoZS1iZXN0LXdheS10by1kZXRlY3QtYS10b3VjaC1zY3JlZW4tZGV2aWNlLXVzaW5nLWphdmFzY3JpcHRcbiAgLy9odHRwOi8vd3d3LnN0dWNveC5jb20vYmxvZy95b3UtY2FudC1kZXRlY3QtYS10b3VjaHNjcmVlbi9cblxuICBpZiAoXCJvbnRvdWNoc3RhcnRcIiBpbiB3aW5kb3cpXG4gIHtcblxuICAgIC8vIGNvbnNvbGUubG9nKFwidXNlciBjYW4gdG91Y2hcIik7XG4gICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoJ2lzLW5vdC10b3VjaCcpOyAgICAgIFxuICAgICQoXCJib2R5XCIpLmFkZENsYXNzKCdpcy10b3VjaCcpOyAgICAgIFxuICAgIC8vIHJ1bihcInRvdWNoXCIpO1xuICAgIFxuICAgICAvL2h0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIzODg1MjU1L2hvdy10by1yZW1vdmUtaWdub3JlLWhvdmVyLWNzcy1zdHlsZS1vbi10b3VjaC1kZXZpY2VzXG4gICAgdHJ5IHsgLy8gcHJldmVudCBleGNlcHRpb24gb24gYnJvd3NlcnMgbm90IHN1cHBvcnRpbmcgRE9NIHN0eWxlU2hlZXRzIHByb3Blcmx5XG4gICAgICAgICAgZm9yICh2YXIgc2kgaW4gZG9jdW1lbnQuc3R5bGVTaGVldHMpIHtcbiAgICAgICAgICAgICAgdmFyIHN0eWxlU2hlZXQgPSBkb2N1bWVudC5zdHlsZVNoZWV0c1tzaV07XG4gICAgICAgICAgICAgIGlmICghc3R5bGVTaGVldC5ydWxlcykgY29udGludWU7XG5cbiAgICAgICAgICAgICAgZm9yICh2YXIgcmkgPSBzdHlsZVNoZWV0LnJ1bGVzLmxlbmd0aCAtIDE7IHJpID49IDA7IHJpLS0pIHtcbiAgICAgICAgICAgICAgICAgIGlmICghc3R5bGVTaGVldC5ydWxlc1tyaV0uc2VsZWN0b3JUZXh0KSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlU2hlZXQucnVsZXNbcmldLnNlbGVjdG9yVGV4dC5tYXRjaCgnOmhvdmVyJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZVNoZWV0LmRlbGV0ZVJ1bGUocmkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXgpIHt9XG4gIFxuICB9XG4gIGVsc2VcbiAge1xuICAgIC8vY29uc29sZS5sb2coXCJ1c2VyIGNhbiB1c2UgdGhlaXIgbW91c2VcIik7XG4gICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoJ2lzLXRvdWNoJyk7ICAgICAgXG4gICAgJChcImJvZHlcIikuYWRkQ2xhc3MoJ2lzLW5vdC10b3VjaCcpOyAgICAgIFxuICAgLy8gIHJ1bihcIm1vdXNlXCIpO1xuICAgfS8vIGlmIChcIm9udG91Y2hzdGFydFwiIGluIHdpbmRvdylcblxufTsvL2RldGVjdFRvdWNoXG5cbi8vVE8gRE8gY2hhbmdlIHRvIGpxdWVyeSBtYXJrdXA/XG5leHBvcnQgZnVuY3Rpb24gU2V0QXBwSGVpZ2h0KCkge1xuXG4gIGNvbnN0IGFwcEhlaWdodCA9ICgpID0+IHtcbiAgICAgY29uc3QgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XG4gICAgZG9jLnN0eWxlLnNldFByb3BlcnR5KCctLXNpdGUtaGVpZ2h0JywgYCR7d2luZG93LmlubmVySGVpZ2h0fXB4YCkgICBcbiAgfS8vYXBwSGVpZ2hcbiBcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGFwcEhlaWdodClcbiAgYXBwSGVpZ2h0KCk7XG5cbn0vL2Z1bmN0aW9uIFNldEFwcEhlaWdodCgpIHtcblxuLy9UTyBETyBjaGFuZ2UgdG8ganF1ZXJ5IG1hcmt1cFxuIFxuZXhwb3J0IGZ1bmN0aW9uIG5hdmlnYXRpb24oKXtcblxuICAgIHZhciBzdmcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIml0b2dnbGVcIik7XG4gICAgdmFyIHMgPSBTbmFwKHN2Zyk7XG5cbiAgICB2YXIgaWRvdCA9IFNuYXAuc2VsZWN0KCcjaWRvdCcpO1xuICAgIHZhciBpZG90cGF0aCA9IFNuYXAuc2VsZWN0KCcjaWRvdC1wYXRoJyk7XG5cbiAgICB2YXIgbWludXMgPSBTbmFwLnNlbGVjdCgnI21pbnVzJyk7XG5cbiAgICB2YXIgaWRvdFBvaW50cyA9IGlkb3Qubm9kZS5nZXRBdHRyaWJ1dGUoJ2QnKTtcbiAgICB2YXIgbWludXNQb2ludHMgPSBtaW51cy5ub2RlLmdldEF0dHJpYnV0ZSgnZCcpO1xuICAgIHZhciBpZG90cGF0aFBvaW50cyA9IGlkb3RwYXRoLm5vZGUuZ2V0QXR0cmlidXRlKCdkJyk7IC8vIHRoaXMgYWRkZWRcblxuXG4gICAgdmFyIHRvTWludXMgPSBmdW5jdGlvbigpe1xuICAgICAgaWRvdC5hbmltYXRlKHsgZDogbWludXNQb2ludHMgfSwgMTAwLCBtaW5hLmVhc2luKTsgIFxuICAgICAgLy9jb25zb2xlLmxvZyhcInRvTWludXNcIilcbiAgICB9XG5cbiAgICB2YXIgdG9JZG90ID0gZnVuY3Rpb24oKXtcbiAgICAgIGlkb3QuYW5pbWF0ZSh7IGQ6IGlkb3RwYXRoUG9pbnRzIH0sIDEwMCwgbWluYS5lYXNpbik7IFxuICAgICAgLy9jb25zb2xlLmxvZyhcInRvSWRvdCBzaG91bCBhbmltYXRlXCIpXG5cbiAgICB9IC8vIHRvSWRvdFxuXG5cbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgdmFyIG5hdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAnaGVhZC1uYXYnICksIGJ1dHRvbiwgbWVudTtcbiAgICBpZiAoICEgbmF2IClcbiAgICAgIHJldHVybjtcbiAgIGJ1dHRvbiA9IG5hdi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCAnbmF2aWdhdGlvbi10b2dnbGUnKVswXTtcbiAgIGJnY2xvc2UgPSBuYXYuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggJ2lucC1iZy1jbG9zZScpWzBdOyBcblxuXG4gIC8vICBidXR0b24gPSBuYXYucXVlcnlTZWxlY3RvckFsbChcIi5uYXZpZ2F0aW9uLXRvZ2dsZSwgLmlucC1iZy1jbG9zZVwiKVxuICAgIG1lbnUgICA9IG5hdi5nZXRFbGVtZW50c0J5VGFnTmFtZSggJ3VsJyApWzBdO1xuICAgIFxuXG4gICAgaWYgKCAhIGJ1dHRvbiApXG4gICAgICByZXR1cm47XG5cbiAgICAvLyBIaWRlIGJ1dHRvbiBpZiBtZW51IGlzIG1pc3Npbmcgb3IgZW1wdHkuXG4gICAgaWYgKCAhIG1lbnUgfHwgISBtZW51LmNoaWxkTm9kZXMubGVuZ3RoICkge1xuICAgICAgYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgXG4gICAgYmdjbG9zZS5vbmNsaWNrID0gZnVuY3Rpb24gdG9nZ2xlcigpIHtcbiAgICAgIGlmICggLTEgPT0gbWVudS5jbGFzc05hbWUuaW5kZXhPZiggJ25hdmlnYXRpb24taXRlbScgKSApXG4gICAgICAgIG1lbnUuY2xhc3NOYW1lID0gJ25hdmlnYXRpb24taXRlbSc7XG5cbiAgICAgIGlmICggLTEgIT0gYnV0dG9uLmNsYXNzTmFtZS5pbmRleE9mKCAnIHRvZ2dsZWQtb24nICkgKSB7XG4gICAgICAgICAgYm9keS5jbGFzc05hbWUgPSBib2R5LmNsYXNzTmFtZS5yZXBsYWNlKCAnIHRvZ2dsZWQtb24nLCAnJyApO1xuICAgICAgICAgIGJ1dHRvbi5jbGFzc05hbWUgPSBidXR0b24uY2xhc3NOYW1lLnJlcGxhY2UoICcgdG9nZ2xlZC1vbicsICcnICk7XG4gICAgICAgICAgbWVudS5jbGFzc05hbWUgPSBtZW51LmNsYXNzTmFtZS5yZXBsYWNlKCAnIHRvZ2dsZWQtb24nLCAnJyApO1xuXG4gICAgICAgICAgdG9JZG90KCk7ICAgICAgICAgIFxuICAgICAgICBcbiAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICBib2R5LmNsYXNzTmFtZSArPSAnIHRvZ2dsZWQtb24nO1xuICAgICAgICAgIGJ1dHRvbi5jbGFzc05hbWUgKz0gJyB0b2dnbGVkLW9uJztcbiAgICAgICAgICBtZW51LmNsYXNzTmFtZSArPSAnIHRvZ2dsZWQtb24nO1xuXG4gICAgICAgICAgdG9NaW51cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgIH0gLy8gaWZcblxuICAgIH07IC8vIHdlJ3JlIGVzc2V0bmlhbGx5IHJlcGVhdGluZyB0d28gZnVuY3Rpb25zIC0gbm90IHZlcnkgbmVhdFxuXG4gICAgYnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbiB0b2dnbGVyKCkge1xuICAgICAgaWYgKCAtMSA9PSBtZW51LmNsYXNzTmFtZS5pbmRleE9mKCAnbmF2aWdhdGlvbi1pdGVtJyApIClcbiAgICAgICAgbWVudS5jbGFzc05hbWUgPSAnbmF2aWdhdGlvbi1pdGVtJztcblxuICAgICAgaWYgKCAtMSAhPSBidXR0b24uY2xhc3NOYW1lLmluZGV4T2YoICcgdG9nZ2xlZC1vbicgKSApIHtcbiAgICAgICAgICBib2R5LmNsYXNzTmFtZSA9IGJvZHkuY2xhc3NOYW1lLnJlcGxhY2UoICcgdG9nZ2xlZC1vbicsICcnICk7XG4gICAgICAgICAgYnV0dG9uLmNsYXNzTmFtZSA9IGJ1dHRvbi5jbGFzc05hbWUucmVwbGFjZSggJyB0b2dnbGVkLW9uJywgJycgKTtcbiAgICAgICAgICBtZW51LmNsYXNzTmFtZSA9IG1lbnUuY2xhc3NOYW1lLnJlcGxhY2UoICcgdG9nZ2xlZC1vbicsICcnICk7XG5cbiAgICAgICAgICB0b0lkb3QoKTsgICAgXG4gIFxuICAgICAgICAgIFxuICAgICAgICAgIC8qXG4gICAgICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCAndG91Y2htb3ZlJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfSwgZmFsc2UgKTsgICAgXG4gICAgICAgICovXG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgYm9keS5jbGFzc05hbWUgKz0gJyB0b2dnbGVkLW9uJztcbiAgICAgICAgICBidXR0b24uY2xhc3NOYW1lICs9ICcgdG9nZ2xlZC1vbic7XG4gICAgICAgICAgbWVudS5jbGFzc05hbWUgKz0gJyB0b2dnbGVkLW9uJztcblxuICAgICAgICAgIHRvTWludXMoKTtcblxuICAgICAgICAgIC8vIGRpc2FibGUgc2Nyb2xsXG4gICAgICAgICAgXG4gICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgZnVuY3Rpb24oZSkge2UucHJldmVudERlZmF1bHQoKX0sIGZhbHNlKTtcblxuICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgIH0gLy8gaWZcblxuICAgIH07XG5cblxuICAgICBpZiAgKCQoJy5uYXZpZ2F0aW9uLXRvZ2dsZScpLmhhc0NsYXNzKCd0b2dnbGVkLW9uJykpe1xuICAgICAgLy8gIGNvbnNvbGUubG9nKCdpZiBuYXZpZ2F0aW9uIHdhcyBwcmV2aW91c2x5IG9uIC0gdHVybiBpdCBvZmYnKTtcbiAgICAgIC8vICAkKCdib2R5JykuYWRkQ2xhc3MoJ3RvZ2dsZWQtb24nKTsgLy8gYmVjYXVzZSB0aGlzIHdhcyBwcmV2aW91c2x5IG9uXG4gICAgIFxuICAgICAgICAgICBib2R5LmNsYXNzTmFtZSA9IGJvZHkuY2xhc3NOYW1lLnJlcGxhY2UoICcgdG9nZ2xlZC1vbicsICcnICk7XG4gICAgICAgICAgIGJ1dHRvbi5jbGFzc05hbWUgPSBidXR0b24uY2xhc3NOYW1lLnJlcGxhY2UoICcgdG9nZ2xlZC1vbicsICcnICk7XG4gICAgICAgICAgIG1lbnUuY2xhc3NOYW1lID0gbWVudS5jbGFzc05hbWUucmVwbGFjZSggJyB0b2dnbGVkLW9uJywgJycgKTtcbiAgICBcbiAgICAgICAgICAgIGlkb3QuYW5pbWF0ZSh7IGQ6IGlkb3RwYXRoUG9pbnRzIH0sIDEwMCwgbWluYS5lYXNpbik7IFxuICAgIC8vICAgICAgICBjb25zb2xlLmxvZyhcInRvSWRvdCBzaG91bCBhbmltYXRlXCIpXG5cbiAgICAgIH0gLy9pZiBoYXMgY2xhc3NcblxufS8vbmF2aWdhdGlvbigpXG4gXG5leHBvcnQgZnVuY3Rpb24gb3JpZW50YXRpb24oKXtcbi8vIHJldmlldyB0aGlzIC0gd2UgbWlnaHQgbmVlZCBpdCB0byBlc251cmUgaW1hZ2Ugb3JpZW5hdGlvbnMgYXJlIGNvcnJlY3RcblxuIGNvbnNvbGUubG9nKFwiaGVsbG8gb3JpZW50YXRpb24gZnVuY3Rpb25cIilcblxuICB2YXIgd2lud2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTsgLy8gc2hvdWxkIGJlIGlubmVyIHdlaWR0aFxuICB2YXIgd2luaGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpOyAvLyBpbm5lciBoZWlnaHRcbiAgdmFyIGlzSG9yaXpvbnRhbDtcblxuICBpZiAod2lud2lkdGggPiB3aW5oZWlnaHQgKSB7XG4gICAgLyogaG9yaXpvbnRhbCBvcmllbnRhdGlvbiAqL1xuICAgICQoXCJib2R5XCIpLmFkZENsYXNzKCdob3Jpem9udGFsJyk7XG4gICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoJ3ZlcnRpY2FsJyk7XG5cbiAgIH0gZWxzZXtcbiAgICAvKiB2ZXJ0aWNhbCBvcmllbnRhdGlvbiAqL1xuICAgICQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKCdob3Jpem9udGFsJyk7XG4gICAgJChcImJvZHlcIikuYWRkQ2xhc3MoJ3ZlcnRpY2FsJyk7XG5cbiAgfS8vZWxzZVxuXG59IC8vIGZ1bmN0aW9uIG9yaWVudGF0aW9uXG5cbmV4cG9ydCBmdW5jdGlvbiBvcGFjaXR5KCl7XG5cbiAgICAvLyAkKFwiYm9keVwiKS5hZGRDbGFzcygncHJlLWxvYWRlZCcpO1xuXG4gICAgJChcImJvZHlcIikuaW1hZ2VzTG9hZGVkKGZ1bmN0aW9uKCl7IC8vIGNvbnNpZGVyIGEgbGF6bG9hZG5nIG9wdGlvbnM/XG5cbiAgICAgIC8vY29uc29sZS5sb2coXCJJbWFnZXMgaGF2ZSBsb2FkZWRcIilcbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIHdhaXRsb2FkaW5nKCl7XG5cbiAgICAgICAgJChcImJvZHlcIikuYWRkQ2xhc3MoJ2xvYWRlZCcpXG5cbiAgICAgICAgfTsgLy93YWl0bG9hZGluZygpXG4gICAgICAgIHNldFRpbWVvdXQod2FpdGxvYWRpbmcsIDIwMCk7XG5cbiAgICAgfSk7IC8vaW1hZ2VzbG9hZGVkXG5cbn07Ly9vcGFjaXR5XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXZHcmlkKCl7XG5cbi8vIGNvbnNvbGUubG9nKFwiZGV2IGdyaWRcIik7XG5cbiAgdmFyICR0b2dnbGUgPSAkKFwiLmRldi10b2dnbGVcIiksIFxuICAkY2xhc3N0YXJnZXQgPSAkKCdib2R5Jyk7IFxuXG4gICR0b2dnbGUuY2xpY2soZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgaWYgKCRjbGFzc3RhcmdldC5oYXNDbGFzcygnZGV2LW9uJykpe1xuICAgICAgICAgIFxuICAgICAgICAkY2xhc3N0YXJnZXQucmVtb3ZlQ2xhc3MoJ2Rldi1vbicpO1xuXG4gICAgICB9IGVsc2V7XG5cbiAgICAgICAgJGNsYXNzdGFyZ2V0LmFkZENsYXNzKCdkZXYtb24nKTtcblxuICAgICAgfTsgLy8gaWYgJCgnYm9keScpLmhhc0NsYXNzKCdkZXYtb24nKVxuXG5cbiAgfSk7IC8vIGNsaWNrICAgICAgXG5cblxuICB2YXIgcnRpbWVkZXY7XG4gIHZhciB0aW1lb3V0ZGV2ID0gZmFsc2U7XG4gIHZhciBkZWx0YWRldiA9IDIwMDtcbiAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpIHtcbiAgICAgIHJ0aW1lZGV2ID0gbmV3IERhdGUoKTtcbiAgICAgIGlmICh0aW1lb3V0ZGV2ID09PSBmYWxzZSkge1xuICAgICAgICAgIHRpbWVvdXRkZXYgPSB0cnVlO1xuICAgICAgICAgIHNldFRpbWVvdXQocmVzaXplZW5kZGV2LCBkZWx0YWRldik7XG4gICAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHJlc2l6ZWVuZGRldigpIHtcbiAgICBcbiAgICAgIGlmIChuZXcgRGF0ZSgpIC0gcnRpbWVkZXYgPCBkZWx0YWRldikge1xuICAgICAgICAgIHNldFRpbWVvdXQocmVzaXplZW5kZGV2LCBkZWx0YWRldik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpbWVvdXRkZXYgPSBmYWxzZTtcbiAgICAgICAgdmFyIHdpbmRvd2hlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKTtcbiAgICAgICAgIC8vY29uc29sZS5sb2coXCJ0aGlzIHdvcmtpbmcgZGV2P1wiKVxuICAgICAgICAgIG9yaWVudGF0aW9uKCk7IC8vdmVydGljYWwgb3IgaG9yaXpvbnRhbFxuXG4gICAgICB9ICAgLy9lbHNlICAgIFxuXG4gICB9Oy8vcmVzaXplZW5kIGZ1Y250aW9uXG5cblxufS8vZXhwb3J0IGZ1bmN0aW9uIGRldmdyaWQoKVxuXG5leHBvcnQgZnVuY3Rpb24gcHJldmlld1NpdGUoKXtcblxuICAvLyBwcmV2aWV3IHNpdGUgLSBpZiBjb29raWVzIGRpYWJsZXMgb3Igbm90IG9uXG4gICAgY29uc29sZS5sb2coXCJwcmV2aWV3c2l0ZSBmdW5jdGlvblwiKTtcblxuICAgICAgJChcImJvZHlcIikuYXR0cmNoYW5nZSh7XG4gICAgICAgIHRyYWNrVmFsdWVzOiB0cnVlLCAvLyBzZXQgdG8gdHJ1ZSBzbyB0aGF0IHRoZSBldmVudCBvYmplY3QgaXMgdXBkYXRlZCB3aXRoIG9sZCAmIG5ldyB2YWx1ZXNcbiAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKGV2bnQpIHtcbiAgICAgICAgICAgIGlmKGV2bnQuYXR0cmlidXRlTmFtZSA9PSBcImNsYXNzXCIpIHsgLy8gd2hpY2ggYXR0cmlidXRlIHlvdSB3YW50IHRvIHdhdGNoIGZvciBjaGFuZ2VzXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciAkbm9idXR0b24gPSAkKFwiI2NuLXJlZnVzZS1jb29raWVcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAkeWVzYnV0dG9uID0gJChcIiNjbi1hY2NlcHQtY29va2llXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJGRvdGJ1dHRvbiA9ICQoXCIuY24tcmV2b2tlLWNvb2tpZVwiKVxuXG5cbiAgICAgICAgICAgICAgICAgIGlmICgkKCdib2R5JykuaGFzQ2xhc3MoJ2Nvb2tpZXMtYWNjZXB0ZWQnKSl7XG4gICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgICAgICAgICAgJG5vYnV0dG9uLmhvdmVyKGZ1bmN0aW9uKCl7IC8vIHdhcyAjY24tYWNjZXB0LWNvb2tpZSAvI2Nvb2tpZS1ub3RpY2VcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCJib2R5XCIpLmFkZENsYXNzKFwicHJldmlldy1zaXRlIGctc2NhbGVcIik7ICAvL0FkZCB0aGUgYWN0aXZlIGNsYXNzIHRvIHRoZSBhcmVhIGlzIGhvdmVyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwicHJldmlldy1zaXRlIGctc2NhbGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgJHllc2J1dHRvbi5ob3ZlcihmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBjb25zb2xlLmxvZyhcImhhcyBjbGFzcyBjb29raWVzLWFjY2VwdGVkIFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCJib2R5XCIpLmFkZENsYXNzKFwicHJldmlldy1zaXRlXCIpOyAgLy9BZGQgdGhlIGFjdGl2ZSBjbGFzcyB0byB0aGUgYXJlYSBpcyBob3ZlcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcInByZXZpZXctc2l0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCQoJ2JvZHknKS5oYXNDbGFzcygnY29va2llcy1yZWZ1c2VkJykpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkbm9idXR0b24uaG92ZXIoZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCJib2R5XCIpLmFkZENsYXNzKFwicHJldmlldy1zaXRlIGctc2NhbGVcIik7ICAvL0FkZCB0aGUgYWN0aXZlIGNsYXNzIHRvIHRoZSBhcmVhIGlzIGhvdmVyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwicHJldmlldy1zaXRlIGctc2NhbGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHllc2J1dHRvbi5ob3ZlcihmdW5jdGlvbigpeyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gIGNvbnNvbGUubG9nKFwiaGFzIGNsYXNzIGNvb2tpZXMtcmVmdXNlZCBcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiYm9keVwiKS5hZGRDbGFzcyhcInByZXZpZXctc2l0ZVwiKTsgIC8vQWRkIHRoZSBhY3RpdmUgY2xhc3MgdG8gdGhlIGFyZWEgaXMgaG92ZXJlZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJwcmV2aWV3LXNpdGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJldmlldyBvbiB0aGUgZG90OlxuXG4gICAgICAgICAgICAgICAgICAgICAgICRkb3RidXR0b24uaG92ZXIoZnVuY3Rpb24oKXsgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiYm9keVwiKS5hZGRDbGFzcyhcInByZXZpZXctc2l0ZVwiKTsgIC8vQWRkIHRoZSBhY3RpdmUgY2xhc3MgdG8gdGhlIGFyZWEgaXMgaG92ZXJlZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJwcmV2aWV3LXNpdGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkKCdib2R5JykuaGFzQ2xhc3MoJ2Nvb2tpZXMtbm90LXNldCcpKXtcbiAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAkeWVzYnV0dG9uLmhvdmVyKGZ1bmN0aW9uKCl7IC8vIHdhcyAjY24tYWNjZXB0LWNvb2tpZSAvI2Nvb2tpZS1ub3RpY2VcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCJib2R5XCIpLmFkZENsYXNzKFwicHJldmlldy1zaXRlXCIpOyAgLy9BZGQgdGhlIGFjdGl2ZSBjbGFzcyB0byB0aGUgYXJlYSBpcyBob3ZlcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcInByZXZpZXctc2l0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkbm9idXR0b24uaG92ZXIoZnVuY3Rpb24oKXsgLy8gd2FzICNjbi1hY2NlcHQtY29va2llIC8jY29va2llLW5vdGljZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICQoXCJib2R5XCIpLmFkZENsYXNzKFwicHJldmlldy1zaXRlIGctc2NhbGVcIik7ICAvL0FkZCB0aGUgYWN0aXZlIGNsYXNzIHRvIHRoZSBhcmVhIGlzIGhvdmVyZWRcbiAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJwcmV2aWV3LXNpdGUgZy1zY2FsZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfS8vPT0gXCJjbGFzc1wiXG5cbiAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgICAgIFxufS8vcHJldmlld1NpdGUoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1lbnVDbGFzc2VzKGRhdGEsIHRhcmdldCkge1xuXG4gICQoJy5tZW51LWl0ZW0uJyArIHRhcmdldCkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgJCh0aGlzKS5yZW1vdmVDbGFzcyh0YXJnZXQpO1xuICB9KTtcblxuICAkKGAubWVudS1pdGVtID4gYVtocmVmJD1cIiR7IGRhdGEubmV4dC51cmwucGF0aCB9XCJdYCkuY2xvc2VzdCgnLm1lbnUtaXRlbScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICQodGhpcykuYWRkQ2xhc3ModGFyZ2V0KTtcbiAgfSk7XG5cbn0gLy9tZW51Q2xhc3Nlcyh0YXJnZXQpXG5cbi8qXG5leHBvcnQgZnVuY3Rpb24gcmVjb3JkYW5pbWF0aW9uKCl7XG5cbiAgY29uc29sZS5sb2coXCJlYWNoIHJlY29yZCBhbmltYXRpb25cIik7XG5cbiAgICAvLyB2aW55bDpcblxuICAgICQoXCIucmVjb3JkLWNpcmNsZS1jb250YWluZXJcIikuZWFjaChmdW5jdGlvbigpIHsgIFxuICAgIC8vICBjb25zb2xlLmxvZyhcImVhY2hyZWNvcmQgY29udGFpbmVyXCIpXG5cbiAgICAgIHZhciAkdGhpc2NvbnRhaW5lciA9ICQodGhpcyksXG4gICAgICAgICAgJHRoaXNjaXJjbGUgPSAkKHRoaXMpLmZpbmQoXCIucmVjb3JkLWNpcmNsZVwiKTtcbiAgICAgICAgICAkdGhpc2NvbnRhaW5lci5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiLFwicm90YXRpbmdcIixcInJvdGF0ZWRcIik7Ly8gaW5jYXNlIGl0cyBhY3RpdmUgc3RpbGwgLSBzZWVtcyB0byBiZSBzb21lIGJ1Z2d5IGJlaGF2aW9yIGF0bVxuICAgICAgICAgICR0aGlzY2lyY2xlLnJlbW92ZUNsYXNzKFwicm90YXRpbmdcIik7Ly8gaW4gYW4gZWZmb3J0IHRvIHJlc2V0P1xuXG4gICAgICAgICAgJHRoaXNjb250YWluZXIuY3NzKFwicG9pbnRlci1ldmVudHNcIixcImluaXRpYWxcIik7Ly8gYWxsb3cgcG9pbnRlciBldmVudHMgbm93IHRoYXQgdGhlIGpzIGlzIHJlYWR5XG5cbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdqdXN0IHJlbW92ZSBjbGFzc2VzJyk7XG5cbiAgICAgICAgJHRoaXNjaXJjbGUuaG92ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAvLyR0aGlzY2lyY2xlLm1vdXNlb3ZlcihmdW5jdGlvbigpIHtcblxuICAgICAgICAgIGlmKCR0aGlzY2lyY2xlLmhhc0NsYXNzKFwicm90YXRpbmdcIikpe1xuICAgICAgICBjb25zb2xlLmxvZyhcImhhcyBjbGFzcyByb3RhdHRpbmdcIilcblxuIFxuICAgICAgICAgICR0aGlzY2lyY2xlLnJlbW92ZUNsYXNzKFwicm90YXRpbmdcIik7IFxuICAgICAgICAgICR0aGlzY2lyY2xlLnJlbW92ZUNsYXNzKFwicm90YXRlXCIpO1xuICAgICAgICAgICR0aGlzY29udGFpbmVyLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRE9FUyBOT1QgaGF2ZSBjbGFzcyByb3RhdHRpbmdcIilcblxuICAgICAgICAgICAkdGhpc2NpcmNsZS5hZGRDbGFzcyhcInJvdGF0aW5nXCIpO1xuICAgICAgICAgICAkdGhpc2NpcmNsZS5hZGRDbGFzcyhcInJvdGF0ZVwiKTtcbiAgICAgICAgICAgJHRoaXNjb250YWluZXIuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XG5cbiAgICAgICAgfSAvLyBpZlxuXG4gICAgICB9KTsgLy8gaG92ZXJcblxuICAgIH0pOyAvLyBlYWNoICQoXCIucmVjb3JkLWNpcmNsZVwiKVxuXG4gLy8gZGlnaXRhbDpcblxuICAkKFwiLnJlY29yZC1zcXVhcmUtY29udGFpbmVyXCIpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZWFjaCBzcXVhcmUgY29udGFpbmVyXCIpO1xuXG5cbiAgICAgIHZhciAkdGhpc2NvbnRhaW5lciA9ICQodGhpcyksXG4gICAgICAgICAgJHRoaXNzcXVhcmUgPSAkKHRoaXMpLmZpbmQoXCIuZmxpcC1jYXJkXCIpOy8vIHdhczogLnJlY29yZC1zcXVhcmVcbiAgICAgICAgICAkdGhpc2NvbnRhaW5lci5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiLFwiZmxpcHBpbmdcIixcImZsaXBwZWRcIik7Ly8gaW5jYXNlIGl0cyBhY3RpdmUgc3RpbGwgLSBzZWVtcyB0byBiZSBzb21lIGJ1Z2d5IGJlaGF2aW9yIGF0bVxuICAgICAgICAgICR0aGlzc3F1YXJlLnJlbW92ZUNsYXNzKFwiZmxpcHBpbmdcIik7Ly8gaW4gYW4gZWZmb3J0IHRvIHJlc2V0P1xuXG4gICAgICAgICAgJHRoaXNjb250YWluZXIuY3NzKFwicG9pbnRlci1ldmVudHNcIixcImluaXRpYWxcIik7Ly8gYWxsb3cgcG9pbnRlciBldmVudHMgbm93IHRoYXQgdGhlIGpzIGlzIHJlYWR5XG5cbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdqdXN0IHJlbW92ZSBjbGFzc2VzJyk7XG5cbiAgICAgICAgJHRoaXNzcXVhcmUuaG92ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJ0aGlzIHNxdWFyZSBob3ZlclwiKVxuXG5cbiAgICAgIC8vJHRoaXNjaXJjbGUubW91c2VvdmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmKCR0aGlzc3F1YXJlLmhhc0NsYXNzKFwiZmxpcHBpbmdcIikpe1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiaGFzIGNsYXNzIGZsaXBwaW5nXCIpXG5cbiAgICAgICAgXG4gICAgICAgICAgJHRoaXNzcXVhcmUucmVtb3ZlQ2xhc3MoXCJmbGlwcGluZ1wiKTsgXG4gICAgICAgICAgJHRoaXNzcXVhcmUucmVtb3ZlQ2xhc3MoXCJmbGlwXCIpO1xuICAgICAgICAgICR0aGlzY29udGFpbmVyLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRE9FUyBOT1QgaGF2ZSBjbGFzcyBmbGlwcGluZ1wiKVxuXG4gICAgICAgICAgICR0aGlzc3F1YXJlLmFkZENsYXNzKFwiZmxpcHBpbmdcIik7XG4gICAgICAgICAgICR0aGlzc3F1YXJlLmFkZENsYXNzKFwiZmxpcFwiKTtcbiAgICAgICAgICAgJHRoaXNjb250YWluZXIuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XG5cbiAgICAgICAgfSAvLyBpZlxuXG4gICAgICB9KTsgLy8gaG92ZXJcblxuICAgfSk7IC8vJChcIi5yZWNvcmQtc3F1YXJlLWNvbnRhaW5lclwiKS5lYWNoKGZ1bmN0aW9uKClcblxufSAvLyBmdW5jdGlvbiByZWNvcmRzY2lyY2xlXG4qL1xuLypcbmV4cG9ydCBmdW5jdGlvbiBob21lZ2FsbGVyeSgpe1xuICAvL2h0dHBzOi8vZmxpY2tpdHkubWV0YWZpenp5LmNvL29wdGlvbnMuaHRtbFxuICAvL2NvbnNvbGUubG9nKFwiaG9tZSBnYWxsZXJ5IGZ1bmN0aW9uXCIpO1xuXG4gICAgdmFyICR0aGlzZ2FsbGVyeSA9ICQoJ2JvZHknKS5maW5kKFwiLmZlYXR1cmVkLWhvbWUtY2Fyb3VzZWxcIik7ICAgICAgXG5cbiAgICAgICR0aGlzZ2FsbGVyeS5mbGlja2l0eSh7XG4gICAgICAgICAgaW1hZ2VzTG9hZGVkOiB0cnVlLCBcbiAgICAgICAgICBzZXRHYWxsZXJ5U2l6ZTogZmFsc2UsIC8vaWYgeW91IHByZWZlciB0byBzaXplIHRoZSBjYXJvdXNlbCB3aXRoIENTUywgcmF0aGVyIHRoYW4gdXNpbmcgdGhlIHNpemUgb2YgY2VsbHMuXG4gICAgICAvLyBkZWZhdWx0IGNlbGxBbGlnbjogJ2NlbnRlcidcbiAgICAgICAgICBwZXJjZW50UG9zaXRpb246IGZhbHNlLCBcbiAgICAgICAgICBmYWRlOiB0cnVlLFxuICAgICAgICAgIGF1dG9QbGF5OiA2MDAwLCAvLyB7TnVtYmVyfVxuICAvL2h0dHBzOi8vZ2l0aHViLmNvbS9tZXRhZml6enkvZmxpY2tpdHkvaXNzdWVzLzQ2XG4gICAgICAgIC8vICBzZWxlY3RlZEF0dHJhY3Rpb246IDAuMDEsXG4gICAgICAgICAgLy8gZnJpY3Rpb246IDAuMTUsXG4gICAgICAgICAgcGF1c2VBdXRvUGxheU9uSG92ZXI6IGZhbHNlLCAvLyBkb24ndCB0aGluayBwYXVzaW5nIGlzIGdvb2QgaWRlYTsgYmVjYXVzZSBvZiB0aGUgc2l6ZShlbnRpcmUgdmlldyBwb3J0KSBvZiB0aGUgY29udGVudFxuICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2UsXG4gICAgICAgICAgZnJlZVNjcm9sbDogZmFsc2UsIFxuICAgICAgICAgIHdyYXBBcm91bmQ6IHRydWUsIFxuICAgICAgICAgIGFycm93U2hhcGU6IHsgXG4gICAgICAgICAgICB4MDogMTUsXG4gICAgICAgICAgICB4MTogNjUsIHkxOiA1MCxcbiAgICAgICAgICAgIHgyOiA3NSwgeTI6IDQwLFxuICAgICAgICAgICAgeDM6IDM1XG4gICAgICAgICAgfVxuICAvLyAgICAgICAgICAgIGFycm93U2hhcGU6ICc4Mi45MzEyNzkzIDI0LjQ1MDE2MjYgODYuOTY1MzkxNyAyNy41NTA0NTI4IDQ5Ljc1NzYxNDYgNzUuOTY1MzkxNyAxMi41NDk4Mzc0IDI3LjU1MDQ1MjggMTYuNTgzOTQ5OCAyNC40NTAxNjI2IDQ5Ljc1NzYxNDYgNjcuNjE1ODk1JyxcblxuICAgICAgICB9KTtcblxufSAvLyBmdW5jdGlvbiBob21lZ2FsbGVyeVxuKi9cbi8qXG5leHBvcnQgZnVuY3Rpb24gaG9tZXJlbGVhc2VnYWxsZXJ5KCl7XG4gIC8vaHR0cHM6Ly9mbGlja2l0eS5tZXRhZml6enkuY28vb3B0aW9ucy5odG1sXG4gIC8vY29uc29sZS5sb2coXCJob21lIGdhbGxlcnkgZnVuY3Rpb25cIik7XG5cbiAgICB2YXIgJHRoaXNnYWxsZXJ5ID0gJCgnYm9keScpLmZpbmQoXCIucmVsZWFzZS1ob21lLWNhcm91c2VsXCIpOyAgICAgIFxuXG4gICAgICAkdGhpc2dhbGxlcnkuZmxpY2tpdHkoe1xuICAgICAgICAgIGltYWdlc0xvYWRlZDogdHJ1ZSwgXG4gICAgICAgICAgc2V0R2FsbGVyeVNpemU6IGZhbHNlLCAvL2lmIHlvdSBwcmVmZXIgdG8gc2l6ZSB0aGUgY2Fyb3VzZWwgd2l0aCBDU1MsIHJhdGhlciB0aGFuIHVzaW5nIHRoZSBzaXplIG9mIGNlbGxzLlxuICAgICAgICAgIHBlcmNlbnRQb3NpdGlvbjogZmFsc2UsIFxuICAgICAgICAgIGF1dG9QbGF5OiA2MDAwLCAvLyB7TnVtYmVyfVxuICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tZXRhZml6enkvZmxpY2tpdHkvaXNzdWVzLzQ2XG4gICAgICAgICAgLy8gc2VsZWN0ZWRBdHRyYWN0aW9uOiAwLjAxLFxuICAgICAgICAgIC8vIGZyaWN0aW9uOiAwLjE1LFxuICAgICAgICAgIHBhdXNlQXV0b1BsYXlPbkhvdmVyOiB0cnVlLFxuICAgICAgICAgIC8vIHBhdXNlQXV0b1BsYXlPbkhvdmVyOiBmYWxzZSwgLy8gZG9uJ3QgdGhpbmsgcGF1c2luZyBpcyBnb29kIGlkZWE7IGJlY2F1c2Ugb2YgdGhlIHNpemUoZW50aXJlIHZpZXcgcG9ydCkgb2YgdGhlIGNvbnRlbnRcbiAgICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgICAgIGZyZWVTY3JvbGw6IGZhbHNlLCBcbiAgICAgICAgICB3cmFwQXJvdW5kOiB0cnVlLCBcbiAgICAgICAgICBhcnJvd1NoYXBlOiB7IFxuICAgICAgICAgICAgeDA6IDE1LFxuICAgICAgICAgICAgeDE6IDY1LCB5MTogNTAsXG4gICAgICAgICAgICB4MjogNzUsIHkyOiA0MCxcbiAgICAgICAgICAgIHgzOiAzNVxuICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGFycm93U2hhcGU6ICc4Mi45MzEyNzkzIDI0LjQ1MDE2MjYgODYuOTY1MzkxNyAyNy41NTA0NTI4IDQ5Ljc1NzYxNDYgNzUuOTY1MzkxNyAxMi41NDk4Mzc0IDI3LjU1MDQ1MjggMTYuNTgzOTQ5OCAyNC40NTAxNjI2IDQ5Ljc1NzYxNDYgNjcuNjE1ODk1JyxcbiAgICAgIH0pO1xuXG59IC8vIGZ1bmN0aW9uIGhvbWVyZWxlYXNlZ2FsbGVyeVxuKi9cbi8qXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRzdmlldygpe1xuLy9ub3Qgc3VyZSB3ZSB1c2UgdGhpcz9cblxuICAgIHZhciAkdG9nZ2xlID0gJChcIi5yZWxlYXNlLXZpZXdcIiksIFxuICAgICAgICAkY2xhc3N0YXJnZXQgPSAkKCdib2R5Jyk7IFxuXG4gICAgICAgICR0b2dnbGUuY2xpY2soZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgLy8gICBjb25zb2xlLmxvZyhcImM7Y2lrbGNrXCIpICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICgkY2xhc3N0YXJnZXQuaGFzQ2xhc3MoJ3JlbGVhc2UtbGlzdC12aWV3Jykpe1xuICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICB2YXIgJGFjdGl2ZWl0ZW0gPSAkKFwiLmhlaWdodC1pdGVtLmFjdGl2ZVwiKTtcblxuICAgICAgICAgICAgICAkY2xhc3N0YXJnZXQucmVtb3ZlQ2xhc3MoJ3JlbGVhc2UtbGlzdC12aWV3Jyk7XG4gICAgICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiAkYWN0aXZlaXRlbS5vZmZzZXQoKS50b3ArMX0pO1xuXG5cbiAgICAgICAgICAgIH0gZWxzZXtcblxuICAgICAgICAgICAgICB2YXIgJGFjdGl2ZWl0ZW0gPSAkKFwiLmhlaWdodC1pdGVtLmFjdGl2ZVwiKTtcblxuICAgICAgICAgICAgICAvLyB0aGlzIHJldHVybnMgZmFsc2UgYmVjYXVzZSBpbml0aWFsbHkgaXRlbSBkb2Vzbid0IGhhdmUgY2xhc3MgdW50aWxsIHNjcm9sbGluZyBjb21tZW5uY2VzXG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAkY2xhc3N0YXJnZXQuYWRkQ2xhc3MoJ3JlbGVhc2UtbGlzdC12aWV3Jyk7XG4gICAgICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoeyBzY3JvbGxUb3A6ICRhY3RpdmVpdGVtLm9mZnNldCgpLnRvcH0pO1xuXG4gICAgICAgICAgICB9OyAvLyBpZiAkKCdib2R5JykuaGFzQ2xhc3MoJ2Rldi1vbicpXG5cbiAgICAgICAgfSk7IC8vIGNsaWNrICAgICAgXG5cbn0gLy8gZnVuY3Rpb24gZXZlbnRzdmlldyggXG4qL1xuLypcbmV4cG9ydCBmdW5jdGlvbiBnYWxsZXJ5KCRibG9jayl7XG5cblxuICAgIC8vaHR0cHM6Ly9mbGlja2l0eS5tZXRhZml6enkuY28vb3B0aW9ucy5odG1sXG4gICAgIGNvbnNvbGUubG9nKFwiZ2FsbGVyeSBmdW5jdGlvblwiKTtcblxuICBGbGlja2l0eS5jcmVhdGVNZXRob2RzLnB1c2goJ19jcmVhdGVQcmV2TmV4dENlbGxzJyk7XG5cbiAgRmxpY2tpdHkucHJvdG90eXBlLl9jcmVhdGVQcmV2TmV4dENlbGxzID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5vbiggJ3NlbGVjdCcsIHRoaXMuc2V0UHJldk5leHRDZWxscyApO1xuICB9O1xuXG4gIEZsaWNraXR5LnByb3RvdHlwZS5zZXRQcmV2TmV4dENlbGxzID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gcmVtb3ZlIGNsYXNzZXNcbiAgICBjaGFuZ2VTbGlkZUNsYXNzZXMoIHRoaXMucHJldmlvdXNTbGlkZSwgJ3JlbW92ZScsICdpcy1wcmV2aW91cycgKTtcbiAgICBjaGFuZ2VTbGlkZUNsYXNzZXMoIHRoaXMubmV4dFNsaWRlLCAncmVtb3ZlJywgJ2lzLW5leHQnICk7XG4gICAgLy8gc2V0IHNsaWRlc1xuICAgIHRoaXMucHJldmlvdXNTbGlkZSA9IHRoaXMuc2xpZGVzWyB0aGlzLnNlbGVjdGVkSW5kZXggLSAxIF07XG4gICAgdGhpcy5uZXh0U2xpZGUgPSB0aGlzLnNsaWRlc1sgdGhpcy5zZWxlY3RlZEluZGV4ICsgMSBdO1xuICAgIC8vIGFkZCBjbGFzc2VzXG4gICAgY2hhbmdlU2xpZGVDbGFzc2VzKCB0aGlzLnByZXZpb3VzU2xpZGUsICdhZGQnLCAnaXMtcHJldmlvdXMnICk7XG4gICAgY2hhbmdlU2xpZGVDbGFzc2VzKCB0aGlzLm5leHRTbGlkZSwgJ2FkZCcsICdpcy1uZXh0JyApO1xuICB9O1xuXG4gICAgdmFyICR0aGlzZ2FsbGVyeSA9ICRibG9jay5maW5kKFwiLmdhbGxlcnktY2Fyb3VzZWxcIik7ICAgICAgXG5cbiAgICAgJHRoaXNnYWxsZXJ5LmZsaWNraXR5KHtcbiAgICAgICAgICBpbWFnZXNMb2FkZWQ6IHRydWUsIFxuICAgICAgICAgIHNldEdhbGxlcnlTaXplOiBmYWxzZSwgLy9pZiB5b3UgcHJlZmVyIHRvIHNpemUgdGhlIGNhcm91c2VsIHdpdGggQ1NTLCByYXRoZXIgdGhhbiB1c2luZyB0aGUgc2l6ZSBvZiBjZWxscy5cbiAgICAgLy8gZGVmYXVsdCBjZWxsQWxpZ246ICdjZW50ZXInXG4gICAgICAgICAgcGVyY2VudFBvc2l0aW9uOiBmYWxzZSwgXG4gICAgICAgICAgZnJlZVNjcm9sbDogdHJ1ZSwgXG4gICAgICAgICAgd3JhcEFyb3VuZDogdHJ1ZSwgXG4gICAgICAgICAgYXJyb3dTaGFwZTogeyBcbiAgICAgICAgICAgIHgwOiAxNSxcbiAgICAgICAgICAgIHgxOiA2NSwgeTE6IDUwLFxuICAgICAgICAgICAgeDI6IDc1LCB5MjogNDAsXG4gICAgICAgICAgICB4MzogMzVcbiAgICAgICAgICB9XG4vLyAgICAgICAgICAgIGFycm93U2hhcGU6ICc4Mi45MzEyNzkzIDI0LjQ1MDE2MjYgODYuOTY1MzkxNyAyNy41NTA0NTI4IDQ5Ljc1NzYxNDYgNzUuOTY1MzkxNyAxMi41NDk4Mzc0IDI3LjU1MDQ1MjggMTYuNTgzOTQ5OCAyNC40NTAxNjI2IDQ5Ljc1NzYxNDYgNjcuNjE1ODk1JyxcblxuICAgICAgIH0pO1xuXG59IC8vIGZ1bmN0aW9uIGdhbGxlcnkoJGJsb2NrKVxuKi9cbi8qXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlU2xpZGVDbGFzc2VzKCBzbGlkZSwgbWV0aG9kLCBjbGFzc05hbWUgKSB7XG4gICBcbiAgaWYgKCAhc2xpZGUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHNsaWRlLmdldENlbGxFbGVtZW50cygpLmZvckVhY2goIGZ1bmN0aW9uKCBjZWxsRWxlbSApIHtcbiAgICBjZWxsRWxlbS5jbGFzc0xpc3RbIG1ldGhvZCBdKCBjbGFzc05hbWUgKTtcbiAgfSk7XG5cbn0gLy9mdW5jdGlvbiBjaGFuZ2VTbGlkZUNsYXNzZXMoIHNsaWRlLCBtZXRob2QsIGNsYXNzTmFtZSApXG4qLyIsIlxuIFxuLy8gVXRpbGl0aWVzLlxuaW1wb3J0IHsgZG9tUmVhZHksXG4gICAgICAgICAgb3BhY2l0eVxuIH0gZnJvbSAnLi91dGlsaXRpZXMvaGVscGVycyc7XG4gaW1wb3J0IHsgb3JpZW50YXRpb24gfSBmcm9tICcuL3V0aWxpdGllcy9oZWxwZXJzJztcblxuXG4vLyBNb2R1bGVzLlxuLy8gaW1wb3J0IGJsb2NrcyBmcm9tICcuLi9ibG9ja3MvaW5kZXgnO1xuXG5jb25zdCBhZG1pbmFwcCA9IHtcblxuICBpbml0KCkge1xuICAgIC8vIE1vZHVsZXMuXG4gICAgY29uc29sZS5sb2coXCJBZG1pbiBBcHAgXCIpO1xuICAgIC8vIGV4YW1wbGUoKTtcbiAgICAvLyBkb21SZWFkeShibG9ja3MpO1xuICAgICBvcGFjaXR5KCk7XG4gICAgIG9yaWVudGF0aW9uKCk7XG5cbiAgfVxuXG59O1xuXG5kb21SZWFkeShhZG1pbmFwcC5pbml0KTtcbiAiXSwibmFtZXMiOlsiZG9tUmVhZHkiLCJmbiIsImRvY3VtZW50IiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvcmllbnRhdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJ3aW53aWR0aCIsIiQiLCJ3aW5kb3ciLCJ3aWR0aCIsIndpbmhlaWdodCIsImhlaWdodCIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJvcGFjaXR5IiwiaW1hZ2VzTG9hZGVkIiwid2FpdGxvYWRpbmciLCJzZXRUaW1lb3V0IiwiYWRtaW5hcHAiLCJpbml0Il0sIm1hcHBpbmdzIjoiU0FDZ0JBLFFBQVQsQ0FBa0JDLEVBQWxCLENBQXNCLENBQzNCLEdBQUlDLFFBQVEsQ0FBQ0MsVUFBVCxHQUF3QixTQUE1QixDQUF1QyxDQUNyQ0YsRUFBRSxHQUNGLE9BQ0QsQ0FDREMsUUFBUSxDQUFDRSxnQkFBVCxDQUEwQixrQkFBMUIsQ0FBOENILEVBQTlDLEVBQ0QsQ0FFRCxTQXdMZ0JJLFdBQVQsRUFBc0IsQ0FHNUJDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLDRCQUFaLEVBRUMsSUFBSUMsUUFBUSxDQUFHQyxDQUFDLENBQUNDLE1BQUQsQ0FBRCxDQUFVQyxLQUFWLEVBQWYsQ0FDQSxJQUFJQyxTQUFTLENBQUdILENBQUMsQ0FBQ0MsTUFBRCxDQUFELENBQVVHLE1BQVYsRUFBaEIsQ0FHQSxHQUFJTCxRQUFRLENBQUdJLFNBQWYsQ0FBMkIsQ0FFekJILENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVUssUUFBVixDQUFtQixZQUFuQixFQUNBTCxDQUFDLENBQUMsTUFBRCxDQUFELENBQVVNLFdBQVYsQ0FBc0IsVUFBdEIsRUFFQSxDQUxGLElBS08sQ0FFTE4sQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVTSxXQUFWLENBQXNCLFlBQXRCLEVBQ0FOLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVUssUUFBVixDQUFtQixVQUFuQixFQUVELENBRUYsQ0FFRCxTQUFnQkUsT0FBVCxFQUFrQixDQUlyQlAsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVUSxZQUFWLENBQXVCLFVBQVUsQ0FJN0IsU0FBU0MsV0FBVCxFQUFzQixDQUV0QlQsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVSyxRQUFWLENBQW1CLFFBQW5CLEVBRUMsQ0FDREssVUFBVSxDQUFDRCxXQUFELENBQWMsR0FBZCxDQUFWLENBRUYsQ0FYRixFQWFIOztBQzdORCxJQUFNRSxRQUFRLENBQUcsQ0FFZkMsSUFGZSxnQkFFUixDQUVMZixPQUFPLENBQUNDLEdBQVIsQ0FBWSxZQUFaLEVBR0NTLE9BQU8sR0FDUFgsV0FBVyxHQUViLENBVmMsQ0FBakIsQ0FjQUwsUUFBUSxDQUFDb0IsUUFBUSxDQUFDQyxJQUFWLENBQVIifQ=="]}