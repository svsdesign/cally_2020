{"version":3,"sources":["app.min.js"],"names":["domReady","fn","document","readyState","addEventListener","detectTouch","console","log","window","$","removeClass","addClass","si","styleSheets","styleSheet","rules","ri","length","selectorText","match","deleteRule","ex","SetAppHeight","appHeight","documentElement","style","setProperty","concat","innerHeight","orientation","winwidth","width","height","opacity","imagesLoaded","setTimeout","imageopacity","find","each","$thisimage","this","attr","newSrc","devGrid","documentGridHeight","$baselines","pxlineheight","vwlineheight","baselinecount","css","remove","click","hasClass","menuPositioner","$positioner","$menu","$menuitems","children","numberofmenuitems","$activemenuitem","filter","positionerwidth","number","index","activemenuitemnumber","applymarginleft","animate","marginLeft","menuClasses","data","target","next","url","path","closest","topAnimation","addattr","scrollTop","offset","top","$thisitem","on","off","removeAttr","fade","animation_height","ratio","Math","round","objectTop","windowBottom","transition","destroyheadroom","headroom","freezeheadroom","unfreezeheadroom","forceheadroompin","removeCommentBubble","images","$block","$thisimageblock","slideshow","getScript","textStatus","jqxhr","$thisgallery","flickity","setGallerySize","percentPosition","freeScroll","wrapAround","arrowShape","x0","x1","y1","x2","y2","x3","map","gMapsCallback","gMapsLoaded","trigger","loadGoogleMaps","script_tag","createElement","setAttribute","getElementsByTagName","appendChild","bind","google","maps","Map","getElementById","center","lat","lng","zoom","panControl","zoomControl","draggable","scrollwheel","mapTypeControl","scaleControl","streetViewControl","overviewMapControl","styles","stylers","saturation","image","themeurl","Marker","position","optimized","icon","blocks","scroll","init$1","Packery","prototype","getShiftPositions","attrName","_this","items","item","element","getAttribute","x","rect","packer","initShiftLayout","positions","JSON","parse","error","layout","_resetLayout","itemPosition","selector","itemElem","querySelector","getItem","shiftLayout","submit","e","preventDefault","method","serializeArray","modal","tinyMCE","push","name","value","get","getContent","ajax","beforeSend","xhr","setRequestHeader","WP_settings","nonce","dataType","always","verifyItemsRepeater","removeRow","hide","show","initiatepackery","$thisgrid","$grid","isEditModeActive","threshold","timeout","isPackeryInit","isGridItemsActive","checkPackery","$griditems","$coordinates","initPositions","$addrow","storedcoordinates","breakpointName","getComputedStyle","body","content","packery","itemSelector","columnWidth","isHorizontal","initLayout","i","$originalimage","thisimageurl","$thisplaceholder","itemid","$thisUi","$thisUiAppend","parent","$thisUiId","gridImageOrientation","thisimagewidth","thisimageheight","itemEdit","imageRemove","convertImgToDataURLviaCanvas","base64_data","iconselectmenu","appendTo","change","event","ui","thisimage","select","$this","$repeateritems","$closestrepeater","$lastitem","clone","ids","max","apply","insertAfter","$newlastitem","newIndex","replace","$newitem","draggie","Draggabilly","imageEdit","jsonpositions","stringify","val","localStorage","setItem","gridContent","innerHTML","$closest","resize","clearTimeout","newData","getCanvas","toDataURL","removeItem","empty","append","$thisedittoggle","not","$thisrotatetoggle","applyxvalue","applyyvalue","applyscalevalue","$inputfields","$postfield","thisnewrotatevalue","$thisrotate","thisrotatevalue","Number","thisclass","newclass","classes","$thisfield","newvalue","thisfieldtype","applyrotatevalue","split","c","lastIndexOf","join","trim","$thisimagethumb","mediaImage","thisitemid","isFunction","wp","media","open","library","type","multiple","state","first","toJSON","id","callback","img","Image","crossOrigin","onload","dataURL","canvas","ctx","getContext","fillStyle","fillRect","src","thiswidth","thisheight","thiswidthtoheightratio","undefined","thisimagewidthtoheightratio","init","touch","barba","views","namespace","afterEnter","hooks","beforeLeave","introanimationdone","devon","afterLeave","nextHtml","html","response","bodyClasses","siteLoad","init$2","initheadroom","tolerance","initial","pinned","unpinned","frozen","mouseenter","windowScrolltop","$intro","introheight","reached","inpapp"],"mappings":";;;;;;;;;AAAA,SAASA,SAASC,GAA6B,YAAtBC,SAASC,WAAqCD,SAASE,iBAAiB,mBAAmBH,GAA1DA,IAA+D,SAASI,cAA4C,GAA9BC,QAAQC,IAAI,kBAAqB,iBAAiBC,OAAO,CAACC,EAAE,QAAQC,YAAY,gBAAgBD,EAAE,QAAQE,SAAS,YAAY,IAAI,IAAI,IAAIC,KAAMV,SAASW,YAAY,CAAC,IAAIC,EAAWZ,SAASW,YAAYD,GAAI,GAAIE,EAAWC,MAAe,IAAI,IAAIC,EAAGF,EAAWC,MAAME,OAAO,EAAM,GAAJD,EAAMA,IAAUF,EAAWC,MAAMC,GAAIE,cAAyBJ,EAAWC,MAAMC,GAAIE,aAAaC,MAAM,WAAWL,EAAWM,WAAWJ,IAAQ,MAAMK,UAAWZ,EAAE,QAAQC,YAAY,YAAYD,EAAE,QAAQE,SAAS,gBAAkB,SAASW,eAA6B,SAAVC,IAAuCrB,SAASsB,gBAAoBC,MAAMC,YAAY,gBAAgB,GAAGC,OAAOnB,OAAOoB,YAAY,OAASpB,OAAOJ,iBAAiB,SAASmB,GAAWA,IAAa,SAASM,cAAcvB,QAAQC,IAAI,8BAA8B,IAAIuB,EAASrB,EAAED,QAAQuB,QAAsBtB,EAAED,QAAQwB,SAAYF,GAAoBrB,EAAE,QAAQE,SAAS,cAAcF,EAAE,QAAQC,YAAY,cAAkBD,EAAE,QAAQC,YAAY,cAAcD,EAAE,QAAQE,SAAS,aAAc,SAASsB,UAAUxB,EAAE,QAAQyB,aAAa,WAAW5B,QAAQC,IAAI,sBAAkF4B,WAA5D,WAAuB1B,EAAE,QAAQE,SAAS,kBAAyC,OAAS,SAASyB,eAAe9B,QAAQC,IAAI,8BAAkDE,EAAE,QAAQ4B,KAAK,wBAAwCC,KAAK,WAAWhC,QAAQC,IAAI,qBAAqB,IAAIgC,EAAW9B,EAAE+B,MAAMD,EAAWL,aAAa,GAAG,WAAW5B,QAAQC,IAAI,sBAAiCgC,EAAWE,KAAK,OAA3B,IAAkCC,EAAOH,EAAWE,KAAK,YAAYF,EAAWE,KAAK,MAAMC,GAAQH,EAAW5B,SAAS,cAAiB,SAASgC,UAAU,IAAsEC,EAA+CC,EAA5F,EAAtBpC,EAAE,aAAaQ,SAA0BR,EAAE,eAAeuB,SAASY,EAAmBnC,EAAE,iBAAiBuB,SAASa,EAAWpC,EAAE,mBAAmBqC,aAAa,KAAKC,aAAa,MAAMC,cAAcJ,EAAmBE,aAAaD,EAAWI,IAAI,SAASL,GAAoBnC,EAAE,8BAA8ByC,SAASzC,EAAE,oBAAoB0C,MAAM,WAAc1C,EAAE,QAAQ2C,SAAS,eAAgB3C,EAAE,QAAQC,YAAY,eAAqBD,EAAE,QAAQE,SAAS,kBAAqB,SAAS0C,iBAAiB/C,QAAQC,IAAI,kBAAkB,IAAI+C,EAAY7C,EAAE,eAAe8C,MAAM9C,EAAE,2BAA2B+C,WAAWD,MAAME,WAAWC,kBAAkBF,WAAWvC,OAAO0C,gBAAgBJ,MAAME,WAAWG,OAAO,sBAAsBC,gBAAgB,IAAIH,kBAAkBF,WAAWlB,KAAK,WAAW,IAAIwB,EAAOrD,EAAE+B,MAAMuB,QAAQ,EAAEtD,EAAE+B,MAAMC,KAAK,cAAcqB,KAAWE,qBAAqBL,gBAAgBlB,KAAK,eAAewB,gBAAgBD,qBAAqBH,gBAAgBA,gBAAgB,IAAIP,EAAYL,IAAI,QAAQY,gBAAgB,KAAKP,EAAYL,IAAI,cAAcgB,gBAAgB,KAAKX,EAAYY,QAAQ,CAACC,WAAWF,iBAAiB,KAAM,SAASG,YAAYC,EAAKC,GAAQ7D,EAAE,cAAc6D,GAAQhC,KAAK,WAAW7B,EAAE+B,MAAM9B,YAAY4D,KAAW7D,EAAE,yBAA0BkB,OAAO0C,EAAKE,KAAKC,IAAIC,KAAK,OAAQC,QAAQ,cAAcpC,KAAK,WAAW7B,EAAE+B,MAAM7B,SAAS2D,KAAY,SAASK,eAAerE,QAAQC,IAAI,2BAA2B4B,WAAW,WAA4G,IAAkCyC,EAAnItE,QAAQC,IAAI,SAASD,QAAQC,IAAI,yBAAyBE,EAAE,QAAQC,YAAY,iBAAoBD,EAAE,QAAQ4D,KAAK,YAAgBO,EAAQnE,EAAE,QAAQ4D,KAAK,WAAW5D,EAAE,cAAcyD,QAAQ,CAACW,UAAUpE,EAAE,IAAImE,GAAYE,SAASC,IAAI,GAAG,IAAI,WAAW,IAAIC,EAAUvE,EAAED,QAAQwE,EAAUC,GAAG,mBAAmB,WAAmI,GAA1GxE,EAAE+B,MAAMqC,YAAuBpE,EAAE,SAASqE,SAASC,MAA0DtE,EAAE,QAAQE,SAAS,4BAA4BqE,EAAUE,IAAI,uBAAwBzE,EAAE,QAAQ0E,WAAW,oBAAyB7E,QAAQC,IAAI,qBAAqBE,EAAE,cAAcyD,QAAQ,CAACW,UAAUpE,EAAE,SAASqE,SAASC,IAAI,GAAG,IAAI,WAAW,IAAIC,EAAUvE,EAAED,QAAQwE,EAAUC,GAAG,mBAAmB,WAAmI,GAA1GxE,EAAE+B,MAAMqC,YAAuBpE,EAAE,SAASqE,SAASC,MAA0DtE,EAAE,QAAQE,SAAS,4BAA4BqE,EAAUE,IAAI,2BAA8B,KAAM,SAASE,OAAO9E,QAAQC,IAAI,mBAAmB,IAAI8E,EAAyC,IAAxB5E,EAAED,QAAQoB,cAAuB0D,EAAMC,KAAKC,MAAM,EAAEH,EAAiB,KAAO,IAAM5E,EAAE,aAAa6B,KAAK,WAAW,IAAImD,EAAUhF,EAAE+B,MAAMsC,SAASC,IAAQW,EAAajF,EAAED,QAAQqE,YAAoC,GAAxBpE,EAAED,QAAQoB,cAAqB6D,EAAUC,EAAiBD,EAAUC,EAAaL,EAAkB5E,EAAE+B,MAAMS,IAAI,CAAC0C,WAAW,sBAAsB1D,QAAQ,IAAUxB,EAAE+B,MAAMS,IAAI,CAAC0C,WAAW,uBAAuB1D,SAASyD,EAAaD,GAAWH,IAAe7E,EAAE+B,MAAMS,IAAI,UAAU,MAAYxC,EAAED,QAAQqE,YAAYpE,EAAED,QAAQwB,UAAUvB,EAAEP,UAAU8B,UAAUvB,EAAE,aAAawC,IAAI,CAAC0C,WAAW,sBAAsB1D,QAAQ,IAAM,SAAS2D,kBAAkBnF,EAAE,oBAAoBoF,SAAS,WAAmB,SAASC,iBAAiBrF,EAAE,oBAAoBoF,SAAS,UAAkB,SAASE,mBAAmBtF,EAAE,oBAAoBoF,SAAS,YAAoB,SAASG,mBAAsBvF,EAAE,oBAAoB2C,SAAS,cAAa3C,EAAE,oBAAoBC,YAAY,YAAYD,EAAE,oBAAoBE,SAAS,WAAmB,SAASsF,sBAAyBxF,EAAE,uBAAuBQ,SAAQX,QAAQC,IAAI,8BAA8BE,EAAE,uBAAuByC,UAEnzK,SAASgD,OAAOC,GAAQ7F,QAAQC,IAAI,8BAA8B,IAAI6F,EAAgBD,EAAO9D,KAAK,OAAO+D,EAAgBnD,IAAI,YAAY,OAAOmD,EAAgB9D,KAAK,WAAWhC,QAAQC,IAAI,qBAAqB,IAAIgC,EAAW9B,EAAE+B,MAAMD,EAAWL,aAAa,GAAG,WAAW5B,QAAQC,IAAI,sBAAiCgC,EAAWE,KAAK,OAA3B,IAAkCC,EAAOH,EAAWE,KAAK,YAAYF,EAAWE,KAAK,MAAMC,GAAQH,EAAW5B,SAAS,cAAiB,SAAS0F,UAAUF,GAAQ1F,EAAE6F,UAAU,sDAAsD,SAASjC,EAAKkC,EAAWC,GAAOlG,QAAQC,IAAI,qCAAqC,IAAIkG,EAAaN,EAAO9D,KAAK,uBAAuB6D,OAAOO,GAAcA,EAAaC,SAAS,CAACxE,cAAa,EAAKyE,gBAAe,EAAMC,iBAAgB,EAAMC,YAAW,EAAMC,YAAW,EAAKC,WAAW,CAACC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,QAAU,SAASC,IAAInB,GAAkD,IAAgmBpC,EAA1oBzD,QAAQC,IAAI,8BAAoD,EAAnBE,EAAE,UAAUQ,SAAilB8C,EAAM,EAAEvD,OAAO+G,cAAc,WAAWC,aAAY,EAAK/G,EAAED,QAAQiH,QAAQ,gBAAiBjH,OAAOkH,eAAe,WAAW,GAAGF,YAAY,OAAOhH,OAAO+G,gBAAgB,IAAII,EAAWzH,SAAS0H,cAAc,UAAUD,EAAWE,aAAa,OAAO,mBAAmBF,EAAWE,aAAa,MAAM,+GAA+G3H,SAAS4H,qBAAqB,QAAQ,IAAI5H,SAASsB,iBAAiBuG,YAAYJ,IAAclH,EAAED,QAAQwH,KAAK,cAA9jC,WAAuSV,IAAI,IAAIW,OAAOC,KAAKC,IAAIjI,SAASkI,eAAe,SAAlT,CAACC,OAAO,CAACC,IAAI,WAAWC,KAAK,mBAAoBC,KAAK,GAAGC,YAAW,EAAMC,aAAY,EAAMC,WAAU,EAAKC,aAAY,EAAMC,gBAAe,EAAMC,cAAa,EAAMC,mBAAkB,EAAMC,oBAAmB,EAAKC,OAAO,CAAC,CAACC,QAAU,CAAC,CAACC,WAAa,YAAgF,IAAIC,EAASC,SAAS,yCAAyCtF,IAAwB,IAAIkE,OAAOC,KAAKoB,OAAO,CAACC,SAAS,CAACjB,IAAI,WAAWC,KAAK,mBAAoBjB,IAAIA,IAAIkC,WAAU,EAAMC,KAAKL,MAA8iB5I,OAAOkH,kBAEjiE,SAASgC,SAA4J,EAAhJjJ,EAAE,uIAAuIQ,QAAUR,EAAE,uIAAuI6B,KAAK,WAAWhC,QAAQC,IAAI,4IAAmK2F,OAARzF,EAAE+B,SAA6D,EAA7B/B,EAAE,oBAAoBQ,QAAUR,EAAE,oBAAoB6B,KAAK,WAAWhC,QAAQC,IAAI,sBAA6C8F,UAAR5F,EAAE+B,SAA8D,EAA3B/B,EAAE,kBAAkBQ,SAAUX,QAAQC,IAAI,oBAAoBE,EAAE,kBAAkB6B,KAAK,WAAkCgF,IAAR7G,EAAE+B,UAA0B/B,EAAED,QAAQmJ,OAAO,WAAWvE,SAE/0B,SAASwE,SAAStJ,QAAQC,IAAI,wBAAwBsJ,QAAQC,UAAUC,kBAAkB,SAASC,GAAUA,EAASA,GAAU,eAAe,IAAIC,EAAMzH,KAAK,OAAOA,KAAK0H,MAAM5C,IAAI,SAAS6C,GAAM,MAAM,CAAC1H,KAAK0H,EAAKC,QAAQC,aAAaL,GAAUM,EAAEH,EAAKI,KAAKD,EAAEL,EAAMO,OAAOzI,UAAY8H,QAAQC,UAAUW,gBAAgB,SAASC,EAAUjI,GAAM,GAAIiI,EAAJ,CAAqC,GAAqB,iBAAXA,EAAqB,IAAIA,EAAUC,KAAKC,MAAMF,GAAY,MAAMG,GAAqB,YAAdrI,KAAKsI,SAAkBrI,EAAKA,GAAM,eAAeD,KAAKuI,eAAevI,KAAK0H,MAAMQ,EAAUpD,IAAI,SAAS0D,GAAc,IAAIC,EAAS,IAAIxI,EAAK,KAAKuI,EAAavI,KAAK,KAASyI,EAAS1I,KAAK4H,QAAQe,cAAcF,GAAcd,EAAK3H,KAAK4I,QAAQF,GAAuD,OAA7Cf,EAAKI,KAAKD,EAAEU,EAAaV,EAAE9H,KAAKgI,OAAOzI,MAAaoI,GAAO3H,MAAMA,KAAK6I,mBAAta7I,KAAKsI,UAAibrK,EAAE,aAAa6K,OAAO,SAASC,GAAGA,EAAEC,iBAAiB,IAAIvB,EAAMxJ,EAAE+B,MAAMgC,EAAIyF,EAAMxH,KAAK,UAAUgJ,EAAOxB,EAAMxH,KAAK,UAAU4B,EAAK4F,EAAMyB,iBAAyDC,GAApC1B,EAAM5H,KAAK,yBAA+B5B,EAAE,mBAAyhB,OAApgBA,EAAE,sBAAsBQ,QAAyB,oBAAV2K,SAAuBvH,EAAKwH,KAAK,CAACC,KAAK,4BAA4BC,MAAMH,QAAQI,IAAI,qBAAqBC,eAAgBxL,EAAEyL,KAAK,CAAC1H,IAAIA,EAAIiH,OAAOA,EAAOU,WAAW,SAAoBC,GAAKA,EAAIC,iBAAiB,aAAaC,YAAYC,QAASlI,KAAKA,EAAKmI,SAAS,SAASC,OAAO,SAASpI,GAAMsH,EAAMA,MAAM,QAAQlL,EAAE,0BAA0BE,SAAS,2BAA2BwB,WAAW,WAAW1B,EAAE,0BAA0BC,YAAY,4BAA6B,QAAgB,IAAoCD,EAAE,mBAA7B,IAAoDiM,EAAoB,WAA+C,IAAmCC,EAAUlM,EAAE,yBAAoE,GAAxCA,EAAE,8BAA8BQ,OAAW0L,EAAUC,OAAaD,EAAUE,QAA4X,SAASC,EAAgBC,GAAWzM,QAAQC,IAAI,qBAAqBwM,GAAc,IAAIC,EAAMD,EAAU7K,aAAa,WAAWzB,EAAE,QAAQE,SAAS,iBAAiB,IAA4BsM,EAA/hBhN,EAAGiN,EAAeC,EAAqfC,GAAc,EAA+BC,GAAkB,EAAM,SAASC,IAAe,IAAgaC,EAA2CC,EAA+DC,EAAyCC,EAA85JC,EAA78KC,EAAeC,iBAAiB3N,SAAS4N,KAAK,UAAUC,QAA4B,iBAAjBH,GAAkCR,EAA2oN,cAAjBQ,GAA8BR,IAAeJ,EAAMgB,QAAQ,WAAWZ,GAAc,EAAM9M,QAAQC,IAAI,gCAAmCE,EAAE,QAAQ2C,SAAS,uBAAuB6J,GAAiB,EAAKxM,EAAE,QAAQC,YAAY,uBAA4BuM,GAAiB,IAAv3ND,EAAMgB,QAAQ,CAACC,aAAa,oBAAoBC,YAAY,cAActH,iBAAgB,EAAKuH,cAAa,EAAKC,YAAW,IAA2EX,GAA/DD,EAAaR,EAAMtI,QAAQ,eAAerC,KAAK,iBAA2CI,KAAK,SAA+B,GAAnB4K,IAA0BA,GAAkB,EAASE,EAAWP,EAAM3K,KAAK,qBAAoFoL,GAA/DD,EAAaR,EAAMtI,QAAQ,eAAerC,KAAK,iBAA2CI,KAAK,SAASiL,EAAQV,EAAMtI,QAAQ,eAAerC,KAAK,2BAA2BkL,EAAWjL,KAAK,SAAS+L,GAAG/N,QAAQC,IAAI,8BAA8B,IAAIyE,EAAUvE,EAAE+B,MAAM8L,EAAetJ,EAAU3C,KAAK,0BAA0BkM,EAAaD,EAAe7L,KAAK,OAAO+L,EAAiBxJ,EAAU3C,KAAK,oBAAoBoM,EAAOzJ,EAAUvC,KAAK,gBAAgBiM,EAAQ1J,EAAU3C,KAAK,aAAasM,EAAcD,EAAQE,OAAO,SAASC,EAAUH,EAAQjM,KAAK,MAA8D,EAAtB6L,EAAerN,QAAU6N,qBAAqB9J,OAAhF+J,OAAeC,GAA2GC,SAASjK,EAAUgI,GAAOkC,YAAYT,GAAQU,6BAA6BZ,EAAa,SAASa,GAAa9O,QAAQC,IAAI,iCAAiCiO,EAAiB/L,KAAK,MAAM2M,OAAsBN,qBAAqB9J,OAA5V+J,OAAeC,GAAuXC,SAASjK,EAAUgI,GAAOkC,YAAYT,IAAShO,EAAE,IAAIoO,GAAcQ,eAAe,CAACC,SAASX,EAAc5M,MAAM,OAAON,MAAM,WAAW8N,OAAO,SAAgBC,EAAMC,GAAInP,QAAQC,IAAI,SAASkP,GAAO,IAAIC,EAAUjP,EAAEgP,EAAGtF,KAAKC,SAAS3H,KAAK,sBAAsBnC,QAAQC,IAAI,YAAYmP,GAAcpB,EAAe7L,KAAK,MAAMiN,IAAaC,OAAO,WAA0BrP,QAAQC,IAAI,uCAAuCyE,EAAU3C,KAAK,6BAA6Bc,WAAYkM,eAAe,cAAc1O,SAAS,0BAA2B+M,EAAQvK,MAAM,WAAW7C,QAAQC,IAAI,mBAAmB,IAAIqP,EAAMnP,EAAE+B,MAAMgL,EAAaoC,EAAMlL,QAAQ,eAAerC,KAAK,gBAAgBwN,EAAeD,EAAMlL,QAAQ,eAAerC,KAAK,kBAAkByN,EAAiBF,EAAMlL,QAAQ,eAAerC,KAAK,aAAa0N,EAAUD,EAAiBzN,KAAK,uBAAuB2N,EAAMD,EAAUC,QAAQC,EAAIJ,EAAevI,IAAI,WAAW,OAAO7G,EAAE+B,MAAMC,KAAK,kBAA4DgM,EAAzBlJ,KAAK2K,IAAIC,MAAM5K,KAAK0K,GAA4B,EAAExP,EAAEuP,GAAOI,YAAYL,GAAW,IAAIM,EAAaP,EAAiBzN,KAAK,uBAAuBiO,EAAS7P,EAAE,8BAA8BQ,OAAO,EAAEyN,EAAQ2B,EAAahO,KAAK,aAAasM,EAAcD,EAAQE,OAAO,SAASyB,EAAahO,KAAK,oCAAoCa,SAASmN,EAAa5N,KAAK,eAAegM,GAAQqB,EAAiBzN,KAAK,6BAA6BI,KAAK,OAAO,SAASsB,EAAM+H,GAAM,OAAOA,EAAKyE,QAAQ,UAAU,IAAID,EAAS,OAAQR,EAAiBzN,KAAK,8BAA8BI,KAAK,OAAO,SAASsB,EAAM+H,GAAM,OAAOA,EAAKyE,QAAQ,UAAU,IAAID,EAAS,OAAQD,EAAahO,KAAK,mBAAmBI,KAAK,KAAK,kBAAkBgM,GAAW4B,EAAahO,KAAK,qBAAqBI,KAAK,KAAK,oBAAoBgM,GAAW4B,EAAa5N,KAAK,kBAAkB,GAAGgM,GAAW4B,EAAahO,KAAK,aAAaI,KAAK,QAAQ,GAAGgM,GAAW4B,EAAahO,KAAK,aAAaI,KAAK,KAAK,mBAAmBgM,GAAW,IAAvsH+B,EAASzD,EAAksH8B,EAAUH,EAAQjM,KAAK,MAAM6L,EAAe+B,EAAahO,KAAK,0BAA0B/B,QAAQC,IAAI,YAAYsO,GAAcpO,EAAE,IAAIoO,GAAcQ,eAAe,CAACC,SAASX,EAAc5M,MAAM,OAAON,MAAM,WAAW8N,OAAO,SAAgBC,EAAMC,GAAInP,QAAQC,IAAI,SAASkP,GAAO,IAAIC,EAAUjP,EAAEgP,EAAGtF,KAAKC,SAAS3H,KAAK,sBAAsBnC,QAAQC,IAAI,YAAYmP,GAAcpB,EAAe7L,KAAK,MAAMiN,IAAaC,OAAO,WAA0BrP,QAAQC,IAAI,uCAAuC8P,EAAahO,KAAK,6BAA6Bc,WAAYkM,eAAe,cAAc1O,SAAS,wBAA7xI6P,EAAm0I/P,EAAEuP,IAA5zIjD,EAAm0IC,GAA9yI3K,KAAKmO,GAAUlO,KAAK,SAAS+L,EAAEnD,GAAU,IAAIuF,EAAQ,IAAIC,YAAYxF,GAAU6B,EAAUiB,QAAQ,wBAAwByC,KAA4rIE,UAAUlC,GAAQS,YAAYT,GAAQQ,SAASxO,EAAEuP,GAAOhD,GAAOA,EAAMgB,QAAQ,WAAWvN,EAAEuP,IAAQ,IAAItF,EAAUqC,EAAUiB,QAAQ,oBAAoB,gBAAgB4C,EAAcjG,KAAKkG,UAAUnG,GAAW8C,EAAasD,IAAIF,GAAelE,EAAoBoD,GAAkBiB,aAAaC,QAAQ,cAAcJ,GAAe,IAAIK,EAAY/Q,SAASkI,eAAe,kBAAkB8I,UAAyN,OAA/MH,aAAaC,QAAQ,cAAcC,GAAaxQ,EAAEuP,GAAOrP,SAAS,cAAcF,EAAE,cAAcyD,QAAQ,CAACW,UAAUpE,EAAEuP,GAAOlL,SAASC,KAAK,KAAK5C,WAAW,WAAW1B,EAAEuP,GAAOtP,YAAY,eAAgB,MAAY,IAASD,EAAEP,UAAU+E,GAAG,QAAQ,wBAAwB,WAAW,IAAiGkM,EAA2CrB,EAA8CtC,EAA2H9C,EAA4DkG,EAA8HK,EAA3e9G,EAAK1J,EAAE,8BAAqqB,OAAvnB,GAAb0J,EAAKlJ,OAAWkJ,EAAK9H,KAAK,SAASyO,IAAI,KAAcK,EAAS1Q,EAAE+B,MAAMkC,QAAQ,kBAAkBoL,EAAiBrP,EAAE+B,MAAMkC,QAAQ,aAAa8I,EAAaR,EAAMtI,QAAQ,eAAerC,KAAK,gBAAgB2K,EAAMgB,QAAQ,SAASmD,GAAUnD,QAAQ,eAAmBtD,EAAUsC,EAAMgB,QAAQ,oBAAoB,gBAAgB4C,EAAcjG,KAAKkG,UAAUnG,GAAWqG,aAAaC,QAAQ,cAAcJ,GAAepD,EAAasD,IAAIF,GAAmBK,EAAY/Q,SAASkI,eAAe,kBAAkB8I,UAAUH,aAAaC,QAAQ,cAAcC,GAAa3Q,QAAQC,IAAI,cAAc0Q,GAAgBvE,EAAoBoD,KAA0B,KAAarP,EAAE,QAAQ2C,SAAS,cAAc4J,EAAMgB,QAAQ,kBAAkBP,EAAc,gBAAgBnN,QAAQC,IAAI,oBAAoBkN,KAAwBnN,QAAQC,IAAI,wBAA4BoN,EAAkBoD,aAAa3F,QAAQ,eAAe9K,QAAQC,IAAI,oBAAoBoN,GAAsBX,EAAMgB,QAAQ,kBAAkBL,EAAkB,iBAAoBlN,EAAE,QAAQ2C,SAAS,cAAc4J,EAAM3K,KAAK,qBAAqBC,KAAK,SAAS+L,EAAEnD,GAAU,IAAIuF,EAAQ,IAAIC,YAAYxF,GAAU8B,EAAMgB,QAAQ,wBAAwByC,KAAYzD,EAAM/H,GAAG,qBAAqB,WAAW3E,QAAQC,IAAI,kCAAkC,IAAImK,EAAUsC,EAAMgB,QAAQ,oBAAoB,gBAAoB4C,EAAcjG,KAAKkG,UAAUnG,GAAW8C,EAAasD,IAAIF,GAAepD,EAAa/K,KAAK,QAAQmO,OAAwBtQ,QAAQC,IAAI,iBAAiByM,EAAM3K,KAAK,qBAAqBC,KAAK,SAAS+L,EAAEnD,GAAU,IAAIuF,EAAQ,IAAIC,YAAYxF,GAAU8B,EAAMgB,QAAQ,wBAAwByC,KAAYzD,EAAM/H,GAAG,qBAAqB,WAAW,IAAIyF,EAAUsC,EAAMgB,QAAQ,oBAAoB,gBAAoB4C,EAAcjG,KAAKkG,UAAUnG,GAAW8C,EAAasD,IAAIF,GAAepD,EAAa/K,KAAK,QAAQmO,GAAeG,aAAaC,QAAQ,cAAcJ,MAAsBnQ,EAAE,QAAQ2C,SAAS,YAAcgK,GAAc,EAAK9M,QAAQC,IAAI0M,EAAiB,qBAA0C,IAAnBA,IAAyB3M,QAAQC,IAAI0M,GAAkBxM,EAAE,QAAQE,SAAS,wBAA0TF,EAAED,QAAQ4Q,OAAO,WAAW9Q,QAAQC,IAAI,uBAAwB4B,WAAW,WAAW7B,QAAQC,IAAI,wBAAwByM,EAAMgB,QAAQ,UAAUvG,QAAQ,mBAAoB,KAAM6F,IAAe7M,EAAED,QAAQyE,GAAG,UAAjzPhF,EAAm0PqN,EAAh0PJ,EAA60P,IAA/yP,WAAwBC,GAASkE,aAAalE,GAAgDhL,WAAtC,WAAmBlC,IAAKkN,EAAQ,MAAyBD,GAAW,UAA6rPzM,EAAE,mBAAmBwE,GAAG,QAAQ,WAAW3E,QAAQC,IAAI,WAAW,IAAoD+Q,EAArCC,UAAUC,UAAU,aAAoCjB,QAAQ,mBAAmB,iCAAiC9P,EAAE,mBAAmBgC,KAAK,WAAW,qBAAqBA,KAAK,OAAO6O,KAAY7Q,EAAE,2BAA2B0C,MAAM,WAAc1C,EAAE,QAAQ2C,SAAS,sBAAuB3C,EAAE,QAAQC,YAAY,sBAA4BD,EAAE,QAAQE,SAAS,wBAA0BF,EAAE,wBAAwB0C,MAAM,WAAW7C,QAAQC,IAAI,0BAA0BwQ,aAAaU,WAAW,eAAeV,aAAaU,WAAW,iBAA2ChR,EAAE,SAAS6B,KAAK,WAA6B,IAAib2O,EAAnclE,UAAUtM,EAAE+B,MAAS/B,EAAE,QAAQ2C,SAAS,cAAcsJ,EAAoBK,WAAWD,EAAgBC,YAA0D,OAAtCgE,aAAa3F,QAAQ,gBAAuBsB,EAAoBK,WAAWD,EAAgBC,WAAekE,EAAY/Q,SAASkI,eAAe,kBAAkB8I,UAAUH,aAAaC,QAAQ,cAAcC,GAAa3Q,QAAQC,IAAI,cAAc0Q,KAAsB3Q,QAAQC,IAAI,gCAAgC0Q,GAAoBA,EAAYF,aAAa3F,QAAQ,eAAe3K,EAAE,mBAAmBiR,QAAQjR,EAAE,mBAAmBkR,OAAOV,GAAavE,EAAoBK,WAAWD,EAAgBC,cAAkC,SAASkC,SAASjK,EAAUgI,GAAO,IAAI4C,EAAM5K,EAAU4M,EAAgB5M,EAAU3C,KAAK,6BAA6BwP,IAAI,oCAAoCC,EAAkB9M,EAAU3C,KAAK,oCAAgU0P,GAA5QnC,EAAMvN,KAAK,kBAAkByO,MAAyBlB,EAAMvN,KAAK,qBAAqByO,MAA0BlB,EAAMvN,KAAK,sBAAsByO,MAA0BlB,EAAMvN,KAAK,uBAAuByO,MAAkBlB,EAAMvN,KAAK,sBAAsByO,MAAwBlB,EAAMvN,KAAK,gCAAgCyO,MAAM,KAAIkB,EAAYpC,EAAMvN,KAAK,gCAAgCyO,MAAM,IAAImB,GAAgBrC,EAAMvN,KAAK,2BAA2ByO,MAAtClB,GAAgDsC,EAAatC,EAAMvN,KAAK,SAAS8P,WAAWvC,EAAMvN,KAAK,uBAAuBuP,EAAgBzO,MAAM,WAAW7C,QAAQC,IAAI,6BAAgCqP,EAAMxM,SAAS,oBAAqBwM,EAAMlP,YAAY,qBAA0BD,EAAE,mCAAmCC,YAAY,oBAAoBkP,EAAMjP,SAAS,oBAAoBiP,EAAMvN,KAAK,cAAcc,WAAY2O,EAAkB3O,MAAM,WAAW7C,QAAQC,IAAI,0BAA0B,IAAyM6R,EAArMC,EAAYzC,EAAMvN,KAAK,sBAAsBiQ,EAAgBC,OAAOF,EAAYvB,OAAOxQ,QAAQC,IAAI,kBAAkB+R,GAAiDF,EAAT,KAAjBE,EAA6C,EAA+BC,OAAOD,EAAgB,IAAKD,EAAYvB,IAAIsB,GAAoB9R,QAAQC,IAAI,qBAAqB6R,GAAuBxC,EAAMvN,KAAK,oBAAoBY,IAAI,YAAY,UAAUmP,EAAmB,UAAWF,EAAajN,GAAG,QAAQ,WAAW,IAAouCuN,EAAyBC,EAAqCC,EAA9xCC,EAAWlS,EAAE+B,MAAMoQ,EAASD,EAAW7B,MAAM+B,EAAcF,EAAWlQ,KAAK,mBAAqC,gBAAfoQ,GAA+BvS,QAAQC,IAAI,iCAAiCuS,iBAAiBF,EAAS,MAAMD,EAAWlQ,KAAK,QAAQmQ,GAAUtS,QAAQC,IAAI,WAAWqS,GAAahD,EAAMvN,KAAK,oBAAoBY,IAAI,YAAY,UAAU6P,iBAAiB,MAA6B,YAAfD,IAAmD,eAAfA,GAAkCL,EAAU,kBAAkBC,EAAS,mBAAmBG,EAAS,GAAMF,EAAQ9C,EAAMnN,KAAK,SAASsQ,MAAM,KAAKnP,OAAO,SAASoP,GAAG,OAAoC,IAA7BA,EAAEC,YAAYT,EAAU,KAAU5C,EAAMnN,KAAK,QAAQiQ,EAAQQ,KAAK,KAAKC,QAAQvD,EAAMjP,SAAS8R,GAAUzF,EAAMgB,QAAQ,UAA6Cc,qBAAqB9J,OAApD+J,OAAeC,IAAuG,gBAAf6D,GAAmCL,EAAU,mBAAmBC,EAAS,oBAAoBG,EAAS,GAAMF,EAAQ9C,EAAMnN,KAAK,SAASsQ,MAAM,KAAKnP,OAAO,SAASoP,GAAG,OAAoC,IAA7BA,EAAEC,YAAYT,EAAU,KAAU5C,EAAMnN,KAAK,QAAQiQ,EAAQQ,KAAK,KAAKC,QAAQvD,EAAMjP,SAAS8R,GAAUzF,EAAMgB,QAAQ,UAA6Cc,qBAAqB9J,OAA5c+J,OAAeC,IAA+f,iBAAf6D,GAAoCL,EAAU,eAAeC,EAAS,gBAAgBG,EAAYF,EAAQ9C,EAAMnN,KAAK,SAASsQ,MAAM,KAAKnP,OAAO,SAASoP,GAAG,OAAoC,IAA7BA,EAAEC,YAAYT,EAAU,KAAU5C,EAAMnN,KAAK,QAAQiQ,EAAQQ,KAAK,KAAKC,QAAQvD,EAAMjP,SAAS8R,IAAkC,0BAAfI,GAAyCd,EAAYa,EAAS,IAAID,EAAWlQ,KAAK,QAAQmQ,GAAUhD,EAAMvN,KAAK,oBAAoBY,IAAI,YAAY,cAAc8O,EAAY,gBAAgBC,EAAY,MAA6B,0BAAfa,GAAyCb,EAAYY,EAAS,IAAID,EAAWlQ,KAAK,QAAQmQ,GAAUhD,EAAMvN,KAAK,oBAAoBY,IAAI,YAAY,cAAc8O,EAAY,gBAAgBC,EAAY,MAA6B,qBAAfa,IAAoCZ,EAAgBW,EAAS,IAAID,EAAWlQ,KAAK,QAAQmQ,GAAUhD,EAAMvN,KAAK,oCAAoCY,IAAI,YAAY,SAASgP,EAAgB,SAAU,SAAStB,UAAUlC,GAAQnO,QAAQC,IAAI,4BAA4BkO,GAAW,IAAI2E,EAAgB3S,EAAE,mBAAmBkB,OAAO8M,IAASnO,QAAQC,IAAI,kBAAkB6S,GAAoBA,EAAgBjQ,MAAM,WAAW,IAAqOkQ,EAAjOzD,EAAMnP,EAAE+B,MAAwC8Q,GAAjB1D,EAAMnN,KAAK,MAAiBmN,EAAMlL,QAAQ,qBAAqBjC,KAAK,iBAAsFF,EAA5D9B,EAAE,kCAAkCkB,OAAO2R,EAAW,MAA2BjR,KAAK,cAAyB,GAAI5B,EAAE8S,WAAWC,GAAGC,OAA0D,OAAGJ,GAAY/S,QAAQC,IAAI,mBAAc8S,EAAWK,UAAeL,EAAWG,GAAGC,MAAM,CAACE,QAAQ,CAACC,KAAK,SAASC,UAAS,KAAmB5O,GAAG,SAAS,WAAW3E,QAAQC,IAAI,uCAAuC,IAAI6I,EAAMiK,EAAWS,QAAQ9H,IAAI,aAAa+H,QAAQC,SAASvT,EAAE,sBAAsBgH,QAAQ,SAAS,IAAIzC,EAAUzC,EAAWmC,QAAQ,qBAAqBqK,EAAe3F,EAAMrH,MAAMiN,EAAgB5F,EAAMpH,OAAOuM,EAAanF,EAAM5E,IAAIjC,EAAWuO,IAAI1H,EAAM6K,IAAIjP,EAAU3C,KAAK,OAAOa,SAAS8B,EAAU3C,KAAK,eAAesP,OAAOlR,EAAE,aAAa2I,EAAM5E,IAAI,QAAQQ,EAAU3C,KAAK,eAAesP,OAAOlR,EAAE,kCAAkC2I,EAAM5E,IAAI,QAAQsK,qBAAqB9J,EAAU+J,EAAeC,GAAiBG,6BAA6BZ,EAAa,SAASa,GAAapK,EAAU3C,KAAK,oBAAoBI,KAAK,MAAM2M,KAAgB3O,EAAE,cAAcyD,QAAQ,CAACW,UAAUG,EAAUF,SAASC,KAAK,OAAQsO,EAAWK,QAAc,GAAt+BpT,QAAQC,IAAI,gCAAo+B,SAAS2O,YAAYT,GAA6BhO,EAAE,qBAAqBkB,OAAO8M,IAA0BtL,MAAM,WAAW,IAAkBmQ,EAAR7S,EAAE+B,MAAuBkC,QAAQ,qBAAqBjC,KAAK,gBAAgBuC,EAAUvE,EAAE,kCAAkCkB,OAAO2R,EAAW,MAA+E,OAAzEtO,EAAU3C,KAAK,OAAOa,SAAS8B,EAAU3C,KAAK,mBAAmByO,IAAI,KAAW,IAAU,SAAS3B,6BAA6B3K,EAAI0P,GAAU,IAAIC,EAAI,IAAIC,MAAQD,EAAIE,YAAY,YAAYF,EAAIG,OAAO,WAAW,IAAgFC,EAA5EC,EAAOtU,SAAS0H,cAAc,UAAc6M,EAAID,EAAOE,WAAW,MAAkBF,EAAOxS,OAAOQ,KAAKR,OAAOwS,EAAOzS,MAAMS,KAAKT,MAAM0S,EAAIE,UAAU,OAAOF,EAAIG,SAAS,EAAE,EAAEJ,EAAOzS,MAAMyS,EAAOxS,QAAQuS,EAAQC,EAAOhD,YAAY0C,EAASK,GAASC,EAAO,MAAOL,EAAIU,IAAIrQ,EAAK,SAASsK,qBAAqB9J,EAAU+J,EAAeC,GAAiB,IAAIY,EAAM5K,EAAU8P,EAAUlF,EAAM7N,QAAQgT,EAAWnF,EAAM5N,SAASgT,EAAuBF,EAAUC,EAAWxS,EAAWqN,EAAMvN,KAAK,OAAwD4S,OAAjDlG,EAAeA,KAAiDA,EAAexM,EAAWR,QAAQiN,EAAgBzM,EAAWP,UAAkF,IAAIkT,EAA4BnG,EAAeC,EAAgBY,EAAMnN,KAAK,aAAa,IAAIF,EAAWE,KAAK,kBAAkB,IAAImN,EAAMnN,KAAK,aAAauS,GAAwBzS,EAAWE,KAAK,kBAAkByS,GAA6BtF,EAAMlP,YAAY,uGAAuG6B,EAAW7B,YAAY,gDAAmDoU,GAAWC,GAAYnF,EAAMjP,SAAS,eAAkBqU,GAAwBE,GAA6DA,EAAvBF,GAAoDpF,EAAMjP,SAAS,2BAAiGmU,EAAUC,EAAYnF,EAAMjP,SAAS,iBAAoCoU,EAAVD,IAAsBlF,EAAMjP,SAAS,mBAAsBqU,GAAwBE,GAA6DA,EAAvBF,GAAoDpF,EAAMjP,SAAS,2BAA4FoO,GAAgBC,EAAiBzM,EAAW5B,SAAS,gBAAyBoO,EAAeC,EAAiBzM,EAAW5B,SAAS,kBAA0CqO,EAAfD,GAAgCxM,EAAW5B,SAAS,oBAEn8kB,SAASwU,OAAO,IAAIC,GAAM,EAAMC,MAAMF,KAAK,CAACG,MAAM,CAAC,CAACC,UAAU,OAAOC,WAAW,WAA0BlV,QAAQC,IAAI,gCAAgC0B,UAAUjC,SAAS0J,UAAW,CAAC6L,UAAU,UAAUC,WAAW,WAA0BlV,QAAQC,IAAI,mCAAmC6B,eAAeH,YAAa,CAACsT,UAAU,cAAcC,WAAW,WAA0BlV,QAAQC,IAAI,uCAAuC6B,eAAeH,UAAUjC,SAAS0J,UAAW,CAAC6L,UAAU,cAAcC,WAAW,WAA0BlV,QAAQC,IAAI,uCAAuC0B,UAAUjC,SAAS4J,QAAQ5J,SAAS0J,UAAW,CAAC6L,UAAU,aAAaC,WAAW,WAA0BlV,QAAQC,IAAI,sCAAsC0B,eAAgBoT,MAAMI,MAAMC,YAAY,SAASrR,GAAM/D,QAAQC,IAAI,eAAeoV,oBAAmB,EAA4CP,GAApC3U,EAAE,QAAQ2C,SAAS,gBAAqFwS,QAAnCnV,EAAE,QAAQ2C,SAAS,iBAAiDiS,MAAMI,MAAMI,WAAW,SAASxR,GAAM/D,QAAQC,IAAI,cAAcE,EAAE,cAAcyD,QAAQ,CAACW,UAAUpE,EAAE,QAAQqE,SAASC,KAAK,IAAI,IAAI+Q,EAASzR,EAAKE,KAAKwR,KAASC,EAASF,EAASvF,QAAQ,uBAAuB,eAAeuF,GAAcG,EAAYxV,EAAEuV,GAAUpS,OAAO,WAAWnB,KAAK,SAAShC,EAAE,QAAQgC,KAAK,QAAQwT,GAAgB5R,EAAKE,KAAKC,IAAIC,OAA0ML,YAAYC,EAAhM,qBAAkND,YAAYC,EAA9L,qBAAgND,YAAYC,EAApL,yBAA8MD,YAAYC,EAAhL,uBAAwMD,YAAYC,EAA1K,0BAA+M,GAAPuR,MAAanV,EAAE,QAAQE,SAAS,eAAqBF,EAAE,QAAQC,YAAY,eAA0B,GAAP0U,GAAa9U,QAAQC,IAAI,eAAeE,EAAE,QAAQE,SAAS,YAAYF,EAAE,QAAQC,YAAY,kBAAsBD,EAAE,QAAQE,SAAS,gBAAgBF,EAAE,QAAQC,YAAY,aAAoC,GAApBiV,oBAA0BrV,QAAQC,IAAI,qCAAqCE,EAAE,QAAQE,SAAS,kBAAkBF,EAAE,QAAQE,SAAS,kBAAkBF,EAAE,QAAQC,YAAY,kBAAuBJ,QAAQC,IAAI,+BAAgC0F,sBAAsB5C,iBAAiBxB,gBAE/tE,SAASqU,WAAW5V,QAAQC,IAAI,YAAmC,GAApBoV,oBAA2BrV,QAAQC,IAAI,iCAAiCE,EAAE,cAAcwC,IAAI,UAAU,GAAGmC,OAAOT,eAAelE,EAAE,QAAQC,YAAY,gBAAgBD,EAAE,QAAQE,SAAS,kBAAkBgV,oBAAmB,IAAWrV,QAAQC,IAAI,gCAAgCE,EAAE,cAAcwC,IAAI,UAAU,GAAGmC,OAAO3E,EAAE,QAAQC,YAAY,iBAEjY,SAASyV,SAAS,SAASC,IAAe9V,QAAQC,IAAI,wDAA2DE,EAAE,oBAAoBQ,SAAQX,QAAQC,IAAI,2BAA2BE,EAAE,oBAAoBoF,SAAS,CAACf,OAAS,EAAEuR,UAAY,EAAE3D,QAAU,CAAC4D,QAAU,WAAWC,OAAS,SAASC,SAAW,WAAWC,OAAS,aAA8tC,GAA4B,EAAzBhW,EAAE,gBAAgBQ,OAAwY,OAA9XX,QAAQC,IAAI,mBAAmD,EAA7BE,EAAE,oBAAoBQ,QAAUR,EAAE,oBAAoBiW,WAAW,WAAiD,GAAtCpW,QAAQC,IAAI,2BAA6BE,EAAE,QAAQ2C,SAAS,UAAyE,OAAxD9C,QAAQC,IAAI,8BAAyByF,qBAAgDvF,EAAE,gBAAsB0C,MAAM,WAA/8B7C,QAAQC,IAAI,SAAaE,EAAE,QAAQoR,IAAI,YAAapR,EAAE,QAAQoR,IAAI,UAAoGpR,EAAE,QAAQ2C,SAAS,WAAW9C,QAAQC,IAAI,gBAAgB6V,IAAe3V,EAAE,QAAQE,SAAS,WAAWF,EAAE,QAAQC,YAAY,YAAuBJ,QAAQC,IAAI,eAAeqF,kBAAkBnF,EAAE,QAAQE,SAAS,UAAUF,EAAE,QAAQC,YAAY,WAA8BD,EAAE,kBAAiC0C,MAAM,WAAW7C,QAAQC,IAAI,mCAAmCE,EAAE,QAAQE,SAAS,WAAWF,EAAE,QAAQC,YAAY,UAAU0V,QAA5gBxQ,kBAAkBnF,EAAE,QAAQE,SAAS,UAAUL,QAAQC,IAAI,iBAAk3B6V,IAA5hD9V,QAAQC,IAAI,8BAAyBE,EAAED,QAAQmJ,OAAO,WAAW,IAAIgN,EAAgBlW,EAAE+B,MAAMqC,YAAoG,GAAxF+R,OAAOnW,EAAE,eAAeoW,YAAYD,OAAO5U,SAAS8U,QAAQH,EAAgBE,YAAwB,GAATC,QAAW,CAAC,IAAGrW,EAAE,QAAQ2C,SAAS,gBAAqL,OAA5F3C,EAAE,QAAQE,SAAS,qBAAgBwB,WAAW,WAAW1B,EAAE,cAAcoE,UAAU,IAAK,IAAhK,IAAGpE,EAAE,QAAQ2C,SAAS,UAAoC,YAAnB2C,wBAA2I,GAAG+Q,QAAQ,IAAMrW,EAAE,QAAQ2C,SAAS,UAAkC,YAAjB0C,mBAEx1B,IAAIiR,OAAO,CAAC5B,KAAK,WAAmB7U,QAAQC,IAAI,QAAQoC,UAAUrB,eAAeO,cAAcxB,cAAc8U,OAAOgB,SAAS9S,iBAAiB6S,aAAclW,SAAS+W,OAAO5B","file":"app.min.js","sourcesContent":["function domReady(fn){if(document.readyState!=='loading'){fn();return;}document.addEventListener('DOMContentLoaded',fn);}function detectTouch(){console.log(\"detectTouch();\");if(\"ontouchstart\"in window){$(\"body\").removeClass('is-not-touch');$(\"body\").addClass('is-touch');try{for(var si in document.styleSheets){var styleSheet=document.styleSheets[si];if(!styleSheet.rules)continue;for(var ri=styleSheet.rules.length-1;ri>=0;ri--){if(!styleSheet.rules[ri].selectorText)continue;if(styleSheet.rules[ri].selectorText.match(':hover')){styleSheet.deleteRule(ri);}}}}catch(ex){}}else{$(\"body\").removeClass('is-touch');$(\"body\").addClass('is-not-touch');}}function SetAppHeight(){var appHeight=function appHeight(){var doc=document.documentElement;doc.style.setProperty('--site-height',\"\".concat(window.innerHeight,\"px\"));};window.addEventListener('resize',appHeight);appHeight();}function orientation(){console.log(\"hello orientation function\");var winwidth=$(window).width();var winheight=$(window).height();if(winwidth>winheight){$(\"body\").addClass('horizontal');$(\"body\").removeClass('vertical');}else{$(\"body\").removeClass('horizontal');$(\"body\").addClass('vertical');}}function opacity(){$(\"body\").imagesLoaded(function(){console.log(\"Images have loaded\");function waitloading(){$(\"body\").addClass('images-loaded');}setTimeout(waitloading,200);});}function imageopacity(){console.log(\"images loaded applied here\");var $thisimageblock=$(\"body\").find(\"img.apply-image-load\");$thisimageblock.each(function(){console.log(\"each image? block\");var $thisimage=$(this);$thisimage.imagesLoaded({},function(){console.log(\"images have loaded\");var oldSrc=$thisimage.attr('src'),newSrc=$thisimage.attr('data-src');$thisimage.attr('src',newSrc);$thisimage.addClass(\"loaded\");});});}function devGrid(){if($('.dev-grid').length>0){var introHeight=$('#intro-area').height(),documentGridHeight=$('#main.wrapper').height(),$baselines=$(\".dev-base-lines\");pxlineheight='10',vwlineheight='1vw',baselinecount=documentGridHeight/pxlineheight;$baselines.css(\"height\",documentGridHeight);$('.dev-base-lines .base-line').remove();$('.dev-grid-toggle').click(function(){if($('body').hasClass('dev-grid-on')){$('body').removeClass('dev-grid-on');}else{$('body').addClass('dev-grid-on');}});}}function menuPositioner(){console.log(\"menupositioner\");var $positioner=$(\"#positioner\");$menu=$(\"#menu-header-navigation\"),$menuitems=$menu.children(),numberofmenuitems=$menuitems.length,$activemenuitem=$menu.children().filter(\".current-menu-item\"),positionerwidth=100/numberofmenuitems;$menuitems.each(function(){var number=$(this).index()+1;$(this).attr(\"menu-number\",number);});activemenuitemnumber=$activemenuitem.attr(\"menu-number\");applymarginleft=activemenuitemnumber*positionerwidth-positionerwidth+\"%\";$positioner.css(\"width\",positionerwidth+\"%\");$positioner.css(\"margin-left\",applymarginleft+\"%\");$positioner.animate({marginLeft:applymarginleft},500);}function menuClasses(data,target){$('.menu-item.'+target).each(function(){$(this).removeClass(target);});$(\".menu-item > a[href$=\\\"\".concat(data.next.url.path,\"\\\"]\")).closest('.menu-item').each(function(){$(this).addClass(target);});}function topAnimation(){console.log(\"function topAnimation()\");setTimeout(function(){console.log(\"hello\");console.log(\"setTimeout(function()\");$('body').removeClass('animation-fix');if($('body').data('move-to')){var addattr=$('body').data('move-to');$('html, body').animate({scrollTop:$(\"#\"+addattr+\"\").offset().top+1},600,function(){var $thisitem=$(window);$thisitem.on('scroll.startitem',function(){var windowPos=$(this).scrollTop(),mainScroll=$('#main').offset().top,scrollHeight=windowPos-mainScroll;if(scrollHeight>=0){$('body').addClass('keep-intro show-nav-logo');$thisitem.off('scroll.startitem');}});$('body').removeAttr('data-move-to');});}else{console.log(\"about to animate?\");$('html, body').animate({scrollTop:$(\"#main\").offset().top+0},600,function(){var $thisitem=$(window);$thisitem.on('scroll.startitem',function(){var windowPos=$(this).scrollTop(),mainScroll=$('#main').offset().top,scrollHeight=windowPos-mainScroll;if(scrollHeight>=0){$('body').addClass('keep-intro show-nav-logo');$thisitem.off('scroll.startitem');}});});}},200);}function fade(){console.log(\"function fade()\");var animation_height=$(window).innerHeight()*0.25;var ratio=Math.round(1/animation_height*10000)/10000;$('.th-block').each(function(){var objectTop=$(this).offset().top;var windowBottom=$(window).scrollTop()+$(window).innerHeight()*0.8;if(objectTop<windowBottom){if(objectTop<windowBottom-animation_height){$(this).css({transition:'opacity 0.1s linear',opacity:1});}else{$(this).css({transition:'opacity 0.25s linear',opacity:(windowBottom-objectTop)*ratio});}}else{$(this).css('opacity',0.1);}});if($(window).scrollTop()+$(window).height()==$(document).height()){$('.th-block').css({transition:'opacity 0.1s linear',opacity:1});}}function destroyheadroom(){$(\"#header-nav-area\").headroom(\"destroy\");return;}function freezeheadroom(){$(\"#header-nav-area\").headroom(\"freeze\");return;}function unfreezeheadroom(){$(\"#header-nav-area\").headroom(\"unfreeze\");return;}function forceheadroompin(){if($(\"#header-nav-area\").hasClass(\"unpinned\")){$(\"#header-nav-area\").removeClass(\"unpinned\");$(\"#header-nav-area\").addClass(\"pinned\");}return;}function removeCommentBubble(){if($('#wpd-bubble-wrapper').length){console.log(\"#wpd-bubble-wrapper exists\");$('#wpd-bubble-wrapper').remove();}}\n\nfunction images($block){console.log(\"images loaded applied here\");var $thisimageblock=$block.find(\"img\");$thisimageblock.css(\"backgroun\",\"red\");$thisimageblock.each(function(){console.log(\"each image? block\");var $thisimage=$(this);$thisimage.imagesLoaded({},function(){console.log(\"images have loaded\");var oldSrc=$thisimage.attr('src'),newSrc=$thisimage.attr('data-src');$thisimage.attr('src',newSrc);$thisimage.addClass(\"loaded\");});});}function slideshow($block){$.getScript(\"https://npmcdn.com/flickity@2/dist/flickity.pkgd.js\",function(data,textStatus,jqxhr){console.log(\" hello function slideshow($block)\");var $thisgallery=$block.find(\".slideshow-carousel\");images($thisgallery);$thisgallery.flickity({imagesLoaded:true,setGallerySize:false,percentPosition:false,freeScroll:false,wrapAround:true,arrowShape:{x0:20,x1:50,y1:50,x2:60,y2:50,x3:30}});});}function map($block){console.log(\"function map($block) - ONE\");if($('#g-map').length>0){var initialize=function initialize(){var mapOptions={center:{lat:51.5198038,lng:-0.1228228999999601},zoom:15,panControl:false,zoomControl:false,draggable:true,scrollwheel:false,mapTypeControl:false,scaleControl:false,streetViewControl:false,overviewMapControl:true,styles:[{\"stylers\":[{\"saturation\":\"-90\"}]}]};map=new google.maps.Map(document.getElementById('g-map'),mapOptions);var image=\"\"+themeurl+'/assets/svg/map_marker_svg_40px.svg?i='+index++;var imageMarker=new google.maps.Marker({position:{lat:51.5198038,lng:-0.1228228999999601},map:map,optimized:false,icon:image});};var index=0;window.gMapsCallback=function(){gMapsLoaded=true;$(window).trigger('gMapsLoaded');};window.loadGoogleMaps=function(){if(gMapsLoaded)return window.gMapsCallback();var script_tag=document.createElement('script');script_tag.setAttribute(\"type\",\"text/javascript\");script_tag.setAttribute(\"src\",\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBUXYryE2krCQ7nIvVcXcFzWEPY0cEcXbE&callback=gMapsCallback\");(document.getElementsByTagName(\"head\")[0]||document.documentElement).appendChild(script_tag);};$(window).bind('gMapsLoaded',initialize);window.loadGoogleMaps();}}\n\nfunction blocks(){if($('.image-one-col-block, .text-two-col-image-block-left-header, .image-multi-col-block, .text-image-two-col-block, .client-logos-block').length>0){$('.image-one-col-block, .text-two-col-image-block-left-header, .image-multi-col-block, .text-image-two-col-block, .client-logos-block').each(function(){console.log(\"each .image-one-col-block, .text-two-col-image-block-left-header, .image-multi-col-block, .text-image-two-col-block, .client-logos-block\");var $thisblock=$(this);images($thisblock);});}if($('.slideshow-block').length>0){$('.slideshow-block').each(function(){console.log(\"if slideshow-block\");var $thisblock=$(this);slideshow($thisblock);});}if($('.contact-block').length>0){console.log(\"if contact block\");$('.contact-block').each(function(){var $thisblock=$(this);map($thisblock);});}$(window).scroll(function(){fade();});}\n\nfunction init$1(){console.log(\"layout-grid/index.js\");Packery.prototype.getShiftPositions=function(attrName){attrName=attrName||'data-item-id';var _this=this;return this.items.map(function(item){return{attr:item.element.getAttribute(attrName),x:item.rect.x/_this.packer.width};});};Packery.prototype.initShiftLayout=function(positions,attr){if(!positions){this.layout();return;}if(typeof positions=='string'){try{positions=JSON.parse(positions);}catch(error){this.layout();return;}}attr=attr||'data-item-id';this._resetLayout();this.items=positions.map(function(itemPosition){var selector='['+attr+'=\"'+itemPosition.attr+'\"]';var itemElem=this.element.querySelector(selector);var item=this.getItem(itemElem);item.rect.x=itemPosition.x*this.packer.width;return item;},this);this.shiftLayout();};$('form#grid').submit(function(e){e.preventDefault();var _this=$(this),url=_this.attr('action'),method=_this.attr('method'),data=_this.serializeArray(),btn=_this.find('button[type=\"submit\"]'),modal=$('#modalResponse');if($('#ag_wysiwyg_editor').length&&typeof tinyMCE!=='undefined'){data.push({name:'fields[ag_wysiwyg_editor]',value:tinyMCE.get('ag_wysiwyg_editor').getContent()});}$.ajax({url:url,method:method,beforeSend:function beforeSend(xhr){xhr.setRequestHeader('X-WP-Nonce',WP_settings.nonce);},data:data,dataType:'json'}).always(function(data){modal.modal('show');$('.response-message-wrap').addClass('response-message-active');setTimeout(function(){$('.response-message-wrap').removeClass('response-message-active');},1000);});return false;});var mediaImage,$imagethumb=$('.acf-image-edit');var verifyItemsRepeater=function verifyItemsRepeater($closestrepeater){var $thisrepeater=$closestrepeater,removeRow=$('.repeater .remove-row');if($('.repeater > .repeater-item').length==1){removeRow.hide();}else{removeRow.show();}};function debounce(fn,threshold){var timeout;return function debounced(){if(timeout){clearTimeout(timeout);}function delayed(){fn();timeout=null;}setTimeout(delayed,threshold||100);};}function makedraggable($newitem,$thisgrid){$thisgrid.find($newitem).each(function(i,itemElem){var draggie=new Draggabilly(itemElem);$thisgrid.packery('bindDraggabillyEvents',draggie);});}function initiatepackery($thisgrid){console.log(\"initiate $thisgrid\"+$thisgrid+\"\");var $grid=$thisgrid.imagesLoaded(function(){$('body').addClass(\"images-loaded\");var isPackeryInit=false;var isEditModeActive;var isGridItemsActive=false;function checkPackery(){var breakpointName=getComputedStyle(document.body,':after').content;if(breakpointName==='\"widescreen\"'&&!isPackeryInit){$grid.packery({itemSelector:'.layout-grid-item',columnWidth:'.grid-sizer',percentPosition:true,isHorizontal:true,initLayout:false});var $coordinates=$grid.closest('.grid-layer').find('.coordinates'),initPositions=$coordinates.attr('value');if(isGridItemsActive==false){isGridItemsActive=true;var $griditems=$grid.find('.layout-grid-item'),$coordinates=$grid.closest('.grid-layer').find('.coordinates'),initPositions=$coordinates.attr('value'),$addrow=$grid.closest('.grid-layer').find('.repeater-wrap .add-row');$griditems.each(function(i){console.log(\"each grid item - iniitally\");var $thisitem=$(this),$originalimage=$thisitem.find('img:not(.place-holder)'),thisimageurl=$originalimage.attr(\"src\"),$thisplaceholder=$thisitem.find('img.place-holder'),itemid=$thisitem.attr('data-item-id'),$thisUi=$thisitem.find('.image-ui'),$thisUiAppend=$thisUi.parent('label'),$thisUiId=$thisUi.attr('id'),thisimagewidth,thisimageheight;if($originalimage.length>0){gridImageOrientation($thisitem,thisimagewidth,thisimageheight);itemEdit($thisitem,$grid);imageRemove(itemid);convertImgToDataURLviaCanvas(thisimageurl,function(base64_data){console.log(\" $griditems. each base64_data\");$thisplaceholder.attr(\"src\",base64_data);});}else{gridImageOrientation($thisitem,thisimagewidth,thisimageheight);itemEdit($thisitem,$grid);imageRemove(itemid);}$('#'+$thisUiId+'').iconselectmenu({appendTo:$thisUiAppend,width:'auto',style:'dropdown',change:function change(event,ui){console.log(\"change\"+ui+\"\");var thisimage=$(ui.item.element).attr(\"data-segment-image\");console.log(\"thisimage\"+thisimage+\"\");$originalimage.attr(\"src\",thisimage);},select:function select(event,ui){console.log(\"close this grid-item-options-toggle\");$thisitem.find('.grid-item-options-toggle').click();}}).iconselectmenu(\"menuWidget\").addClass(\"ui-menu-icons avatar\");});$addrow.click(function(){console.log(\"hello add a row\");var $this=$(this),$coordinates=$this.closest('.grid-layer').find('.coordinates'),$repeateritems=$this.closest('.grid-layer').find('.repeater-item'),$closestrepeater=$this.closest('.grid-layer').find('.repeater'),$lastitem=$closestrepeater.find('.repeater-item:last'),clone=$lastitem.clone(),ids=$repeateritems.map(function(){return $(this).attr('data-item-id');}),maxValueInArray=Math.max.apply(Math,ids),itemid=maxValueInArray+1;$(clone).insertAfter($lastitem);var $newlastitem=$closestrepeater.find('.repeater-item:last'),newIndex=$('.repeater > .repeater-item').length-1,$thisUi=$newlastitem.find('.image-ui'),$thisUiAppend=$thisUi.parent('label');$newlastitem.find('.ui-selectmenu-button, .ui-front').remove();$newlastitem.attr('data-item-id',itemid);$closestrepeater.find('.repeater-item:last[name]').attr('name',function(index,name){return name.replace(/\\[\\d+\\]/,'['+newIndex+']');});$closestrepeater.find('.repeater-item:last [name]').attr('name',function(index,name){return name.replace(/\\[\\d+\\]/,'['+newIndex+']');});$newlastitem.find('.acf-image-edit').attr('id','acf-image-edit-'+itemid+'');$newlastitem.find('.acf-image-remove').attr('id','acf-image-remove-'+itemid+'');$newlastitem.attr('data-item-id-id',''+itemid+'');$newlastitem.find('.input-id').attr('value',''+itemid+'');$newlastitem.find('.image-ui').attr('id','acf-post-object-'+itemid+'');var $thisUiId=$thisUi.attr('id'),$originalimage=$newlastitem.find('img:not(.place-holder)');console.log(\"$thisUiId\"+$thisUiId+\"\");$('#'+$thisUiId+'').iconselectmenu({appendTo:$thisUiAppend,width:'auto',style:'dropdown',change:function change(event,ui){console.log(\"change\"+ui+\"\");var thisimage=$(ui.item.element).attr(\"data-segment-image\");console.log(\"thisimage\"+thisimage+\"\");$originalimage.attr(\"src\",thisimage);},select:function select(event,ui){console.log(\"close this grid-item-options-toggle\");$newlastitem.find('.grid-item-options-toggle').click();}}).iconselectmenu(\"menuWidget\").addClass(\"ui-menu-icons avatar\");makedraggable($(clone),$grid);imageEdit(itemid);imageRemove(itemid);itemEdit($(clone),$grid);$grid.packery('appended',$(clone));var positions=$thisgrid.packery('getShiftPositions','data-item-id'),jsonpositions=JSON.stringify(positions);$coordinates.val(jsonpositions);verifyItemsRepeater($closestrepeater);localStorage.setItem(\"coordinates\",jsonpositions);var gridContent=document.getElementById(\"tester-grid-id\").innerHTML;localStorage.setItem(\"gridContent\",gridContent);$(clone).addClass(\"item-added\");$('html, body').animate({scrollTop:$(clone).offset().top},200);setTimeout(function(){$(clone).removeClass(\"item-added\");},600);return false;});$(document).on('click','.repeater .remove-row',function(){var item=$('.repeater > .repeater-item');if(item.length==1){item.find('input').val('');}else{var $closest=$(this).closest('.repeater-item'),$closestrepeater=$(this).closest('.repeater'),$coordinates=$grid.closest('.grid-layer').find('.coordinates');$grid.packery('remove',$closest).packery('shiftLayout');var positions=$grid.packery('getShiftPositions','data-item-id'),jsonpositions=JSON.stringify(positions);localStorage.setItem(\"coordinates\",jsonpositions);$coordinates.val(jsonpositions);var gridContent=document.getElementById(\"tester-grid-id\").innerHTML;localStorage.setItem(\"gridContent\",gridContent);console.log(\"gridContent\"+gridContent+\"\");verifyItemsRepeater($closestrepeater);}return false;});}if($('body').hasClass('logged-in')){$grid.packery('initShiftLayout',initPositions,'data-item-id');console.log(\"storedcoordinates\"+initPositions+\"\");}else{console.log(\"not logged in hhere \");var storedcoordinates=localStorage.getItem('coordinates');console.log(\"storedcoordinates\"+storedcoordinates+\"\");$grid.packery('initShiftLayout',storedcoordinates,'data-item-id');}if($('body').hasClass('logged-in')){$grid.find('.layout-grid-item').each(function(i,itemElem){var draggie=new Draggabilly(itemElem);$grid.packery('bindDraggabillyEvents',draggie);});$grid.on('dragItemPositioned',function(){console.log(\"$grid.on( 'dragItemPositioned'\");var positions=$grid.packery('getShiftPositions','data-item-id');var jsonpositions=JSON.stringify(positions);$coordinates.val(jsonpositions);$coordinates.attr('value',jsonpositions);});}else{console.log(\"not logged in\");$grid.find('.layout-grid-item').each(function(i,itemElem){var draggie=new Draggabilly(itemElem);$grid.packery('bindDraggabillyEvents',draggie);});$grid.on('dragItemPositioned',function(){var positions=$grid.packery('getShiftPositions','data-item-id');var jsonpositions=JSON.stringify(positions);$coordinates.val(jsonpositions);$coordinates.attr('value',jsonpositions);localStorage.setItem(\"coordinates\",jsonpositions);});}if($('body').hasClass(\"is-touch\")){}isPackeryInit=true;console.log(isEditModeActive+\"isEditModeActive\");if(isEditModeActive===true){console.log(isEditModeActive);$('body').addClass('dev-layout-grid-on');}}else if(breakpointName==='\"default\"'&&isPackeryInit){$grid.packery('destroy');isPackeryInit=false;console.log(\"Hellow vbreakpoint - mobile?\");if($('body').hasClass(\"dev-layout-grid-on\")){isEditModeActive=true;$('body').removeClass('dev-layout-grid-on');}else{isEditModeActive=false;}}else{}$(window).resize(function(){console.log(\"resize(function()\");});setTimeout(function(){console.log(\"setTimeout(function)\");$grid.packery('layout').trigger('layoutComplete');},100);}checkPackery();$(window).on('resize',debounce(checkPackery,200));});}$(\"#download-image\").on('click',function(){console.log(\"hello?!\");var imgageData=getCanvas.toDataURL(\"image/png\");var newData=imgageData.replace(/^data:image\\/png/,\"data:application/octet-stream\");$(\"#download-image\").attr(\"download\",\"your_pic_name.png\").attr(\"href\",newData);});$(\".dev-layout-grid-toggle\").click(function(){if($('body').hasClass(\"dev-layout-grid-on\")){$('body').removeClass('dev-layout-grid-on');}else{$('body').addClass('dev-layout-grid-on');}});$(\".clear-local-storage\").click(function(){console.log(\"clearing local storage\");localStorage.removeItem('gridContent');localStorage.removeItem('coordinates');});function initgriditems(){$('.grid').each(function(){$thisgrid=$(this);if($(\"body\").hasClass(\"logged-in\")){verifyItemsRepeater($thisgrid);initiatepackery($thisgrid);}else{if(localStorage.getItem(\"gridContent\")===null){verifyItemsRepeater($thisgrid);initiatepackery($thisgrid);var gridContent=document.getElementById(\"tester-grid-id\").innerHTML;localStorage.setItem(\"gridContent\",gridContent);console.log(\"gridContent\"+gridContent+\"\");}else{console.log(\"HAS local storage gridContent\"+gridContent+\"\");var gridContent=localStorage.getItem(\"gridContent\");$(\"#tester-grid-id\").empty();$(\"#tester-grid-id\").append(gridContent);verifyItemsRepeater($thisgrid);initiatepackery($thisgrid);}}});}initgriditems();}function itemEdit($thisitem,$grid){var $this=$thisitem,$thisedittoggle=$thisitem.find('.grid-item-options-toggle').not(\".grid-item-options-toggle-rotate\"),$thisrotatetoggle=$thisitem.find('.grid-item-options-toggle-rotate'),thisitemidvalue=$this.find('input.input-id').val(),thisitemwidthvalue=$this.find('input.input-width').val(),thisitemheightvalue=$this.find('input.input-height').val(),thisitemzindexvalue=$this.find('input.input-z-index').val(),applyrotate=$this.find('input.input-rotate').val()+\"deg\",applyxvalue=$this.find('input.input-image-position-x').val()+\"%\",applyyvalue=$this.find('input.input-image-position-y').val()+\"%\",applyscalevalue=$this.find('input.input-image-scale').val()/100,$inputfields=$this.find('input');$postfield=$this.find('.post-object select');$thisedittoggle.click(function(){console.log(\"click; activate edit item\");if($this.hasClass(\"item-edit-active\")){$this.removeClass(\"item-edit-active\");}else{$('.layout-grid-item.repeater-item').removeClass(\"item-edit-active\");$this.addClass(\"item-edit-active\");$this.find('.ui-button').click();}});$thisrotatetoggle.click(function(){console.log(\"click; rotate clicking\");var $thisrotate=$this.find('input.input-rotate'),thisrotatevalue=Number($thisrotate.val());console.log(\"thisrotatevalue\"+thisrotatevalue+\"\");if(thisrotatevalue==270){var thisnewrotatevalue=0;}else{var thisnewrotatevalue=Number(thisrotatevalue+90);}$thisrotate.val(thisnewrotatevalue);console.log(\"thisnewrotatevalue\"+thisnewrotatevalue+\"\");$this.find(\".inner-grid-item\").css(\"transform\",\"rotate(\"+thisnewrotatevalue+\"deg)\");});$inputfields.on('input',function(){var $thisfield=$(this),newvalue=$thisfield.val(),thisfieldtype=$thisfield.attr('data-input-type');if(thisfieldtype==\"image_rotate\"){console.log(\"rotate input on pinput change\");applyrotatevalue=newvalue+\"deg\";$thisfield.attr(\"value\",newvalue);console.log(\"newvalue\"+newvalue+\"\");$this.find(\".inner-grid-item\").css(\"transform\",\"rotate(\"+applyrotatevalue+\")\");}else if(thisfieldtype==\"input-id\"){}else if(thisfieldtype==\"input-width\"){var thisclass=\"grid-item-width\",newclass=\"grid-item-width-\"+newvalue/25+\"\",classes=$this.attr('class').split(\" \").filter(function(c){return c.lastIndexOf(thisclass,0)!==0;});$this.attr('class',classes.join(\" \").trim());$this.addClass(newclass);$grid.packery('layout');var thisimagewidth,thisimageheight;gridImageOrientation($thisitem,thisimagewidth,thisimageheight);}else if(thisfieldtype==\"input-height\"){var thisclass=\"grid-item-height\",newclass=\"grid-item-height-\"+newvalue/25+\"\",classes=$this.attr('class').split(\" \").filter(function(c){return c.lastIndexOf(thisclass,0)!==0;});$this.attr('class',classes.join(\" \").trim());$this.addClass(newclass);$grid.packery('layout');var thisimagewidth,thisimageheight;gridImageOrientation($thisitem,thisimagewidth,thisimageheight);}else if(thisfieldtype==\"input-z-index\"){var thisclass=\"item-z-index\",newclass=\"item-z-index-\"+newvalue+\"\",classes=$this.attr('class').split(\" \").filter(function(c){return c.lastIndexOf(thisclass,0)!==0;});$this.attr('class',classes.join(\" \").trim());$this.addClass(newclass);}else if(thisfieldtype==\"input-image-position-x\"){applyxvalue=newvalue+\"%\";$thisfield.attr(\"value\",newvalue);$this.find(\".inner-grid-item\").css(\"transform\",\"translateX(\"+applyxvalue+\") translateY(\"+applyyvalue+\")\");}else if(thisfieldtype==\"input-image-position-y\"){applyyvalue=newvalue+\"%\";$thisfield.attr(\"value\",newvalue);$this.find(\".inner-grid-item\").css(\"transform\",\"translateX(\"+applyxvalue+\") translateY(\"+applyyvalue+\")\");}else if(thisfieldtype==\"input-image-scale\"){applyscalevalue=newvalue/100;$thisfield.attr(\"value\",newvalue);$this.find(\".inner-grid-item .image-wrap img\").css(\"transform\",\"scale(\"+applyscalevalue+\")\");}});}function imageEdit(itemid){console.log(\"imageedit function itemid\"+itemid+\"\");var $thisimagethumb=$(\"#acf-image-edit-\".concat(itemid));console.log(\"$thisimagethumb\"+$thisimagethumb+\"\");$thisimagethumb.click(function(){var $this=$(this),thisimagethumbid=$this.attr(\"id\"),thisitemid=$this.closest(\".layout-grid-item\").attr(\"data-item-id\"),$thisitem=$(\".layout-grid-item[data-item-id=\".concat(thisitemid,\"]\")),$thisimage=$thisitem.find(\".acf-image\"),mediaImage;if(!$.isFunction(wp.media)){console.log(\"! $.isFunction( wp.media )\");return;}if(mediaImage){console.log(\"mediaImage\");mediaImage.open();return;}mediaImage=wp.media({library:{type:'image'},multiple:false});mediaImage.on('select',function(){console.log(\"mediaImage.on( 'select', function()\");var image=mediaImage.state().get('selection').first().toJSON();$('.media-modal-close').trigger('click');var $thisitem=$thisimage.closest(\".layout-grid-item\"),thisimagewidth=image.width,thisimageheight=image.height,thisimageurl=image.url;$thisimage.val(image.id);$thisitem.find('img').remove();$thisitem.find('.image-wrap').append($('<img src=\"'+image.url+'\"\">'));$thisitem.find('.image-wrap').append($('<img class=\"place-holder\" src=\"'+image.url+'\"\">'));gridImageOrientation($thisitem,thisimagewidth,thisimageheight);convertImgToDataURLviaCanvas(thisimageurl,function(base64_data){$thisitem.find('img.place-holder').attr(\"src\",base64_data);});$('html, body').animate({scrollTop:$thisitem.offset().top},200);});mediaImage.open();return false;});}function imageRemove(itemid){var $thisimagedelete=$(\"#acf-image-remove-\".concat(itemid));$thisimagedelete.click(function(){var $this=$(this),thisitemid=$this.closest(\".layout-grid-item\").attr(\"data-item-id\"),$thisitem=$(\".layout-grid-item[data-item-id=\".concat(thisitemid,\"]\"));$thisitem.find('img').remove();$thisitem.find('input.acf-image').val(\"\");return false;});}function convertImgToDataURLviaCanvas(url,callback){var img=new Image();img.crossOrigin='Anonymous';img.onload=function(){var canvas=document.createElement('CANVAS');var ctx=canvas.getContext('2d');var dataURL;canvas.height=this.height;canvas.width=this.width;ctx.fillStyle=\"#000\";ctx.fillRect(0,0,canvas.width,canvas.height);dataURL=canvas.toDataURL();callback(dataURL);canvas=null;};img.src=url;}function gridImageOrientation($thisitem,thisimagewidth,thisimageheight){var $this=$thisitem,thiswidth=$this.width(),thisheight=$this.height(),thiswidthtoheightratio=thiswidth/thisheight,$thisimage=$this.find('img'),thisimagewidth=thisimagewidth;if(thisimagewidth==undefined){var thisimagewidth=$thisimage.width(),thisimageheight=$thisimage.height();}else{var thisimagewidth=thisimagewidth,thisimageheight=thisimageheight;}var thisimagewidthtoheightratio=thisimagewidth/thisimageheight;$this.attr(\"item-ratio\",\"\");$thisimage.attr(\"itemimage-ratio\",\"\");$this.attr(\"item-ratio\",thiswidthtoheightratio);$thisimage.attr(\"itemimage-ratio\",thisimagewidthtoheightratio);$this.removeClass(\"square-item image-larger-than-item vertical-item horizontal-item ratio-equal image-larger-than-item\");$thisimage.removeClass(\"square-image vertical-image horizontal-image\");if(thiswidth==thisheight){$this.addClass(\"square-item\");if(thiswidthtoheightratio==thisimagewidthtoheightratio){}else if(thiswidthtoheightratio>thisimagewidthtoheightratio){$this.addClass(\"image-larger-than-item\");}else if(thiswidthtoheightratio>thisimagewidthtoheightratio){}}else if(thiswidth<thisheight){$this.addClass(\"vertical-item\");}else if(thiswidth>thisheight){$this.addClass(\"horizontal-item\");if(thiswidthtoheightratio==thisimagewidthtoheightratio){}else if(thiswidthtoheightratio>thisimagewidthtoheightratio){$this.addClass(\"image-larger-than-item\");}else if(thiswidthtoheightratio>thisimagewidthtoheightratio){}}if(thisimagewidth==thisimageheight){$thisimage.addClass(\"square-image\");}else if(thisimagewidth<thisimageheight){$thisimage.addClass(\"vertical-image\");}else if(thisimagewidth>thisimageheight){$thisimage.addClass(\"horizontal-image\");}}\n\nfunction init(){var touch=false;barba.init({views:[{namespace:'page',afterEnter:function afterEnter(data){console.log(\"afterEnter: namespace = page\");opacity();domReady(blocks);}},{namespace:'archive',afterEnter:function afterEnter(data){console.log(\"afterEnter: namespace = archive\");imageopacity();opacity();}},{namespace:'single-post',afterEnter:function afterEnter(data){console.log(\"afterEnter: namespace = single-post\");imageopacity();opacity();domReady(blocks);}},{namespace:'layout-grid',afterEnter:function afterEnter(data){console.log(\"afterEnter: namespace = layout grid\");opacity();domReady(init$1);domReady(blocks);}},{namespace:'front-page',afterEnter:function afterEnter(data){console.log(\"afterEnter: namespace = front-page\");opacity();}}]});barba.hooks.beforeLeave(function(data){console.log(\"beforeleave\");introanimationdone=true;if($('body').hasClass('is-not-touch')){touch=false;}else{touch=true;}if($('body').hasClass('dev-grid-on')){devon=true;}else{devon=false;}});barba.hooks.afterLeave(function(data){console.log(\"afterleave\");$('html, body').animate({scrollTop:$(\"body\").offset().top},10);var nextHtml=data.next.html;var response=nextHtml.replace(/(<\\/?)body( .+?)?>/gi,'$1notbody$2>',nextHtml);var bodyClasses=$(response).filter('notbody').attr('class');$(\"body\").attr(\"class\",bodyClasses);if(data.next.url.path){var currentMenu='current-menu-item',currentPage='current_page_item',currentMenuAncestor='current-menu-ancestor',currentMenuParent='current-menu-parent',currentPageAncestor='current_page_ancestor';menuClasses(data,currentMenu);menuClasses(data,currentPage);menuClasses(data,currentMenuAncestor);menuClasses(data,currentMenuParent);menuClasses(data,currentPageAncestor);}if(devon==true){$('body').addClass('dev-grid-on');}else{$('body').removeClass('dev-grid-on');}if(touch==true){console.log(\"apply touch\");$('body').addClass('is-touch');$(\"body\").removeClass('is-not-touch');}else{$(\"body\").addClass('is-not-touch');$(\"body\").removeClass('is-touch');}if(introanimationdone==true){console.log(\"introanimation not needed anymore\");$(\"body\").addClass('animation-done');$(\"body\").addClass('animation-hide');$(\"body\").removeClass('animation-fix');}else{console.log(\"introanimationdone == false\");}removeCommentBubble();menuPositioner();orientation();});}\n\nfunction siteLoad(){console.log(\"siteLoad\");if(introanimationdone==false){console.log(\"(introanimationdone == false)\");$('.fade-item').css('opacity',0);fade();topAnimation();$('body').removeClass('site-loading');$('body').addClass('animation-done');introanimationdone=true;}else{console.log(\"(introanimationdone == true)\");$('.fade-item').css('opacity',0);fade();$('body').removeClass('site-loading');}}\n\nfunction init$2(){function initheadroom(){console.log(\"inithreadroom - shoul be once, intuyll we destroy it\");if($(\"#header-nav-area\").length){console.log(\"#header-nav-area exists\");$(\"#header-nav-area\").headroom({\"offset\":0,\"tolerance\":5,\"classes\":{\"initial\":\"animated\",\"pinned\":\"pinned\",\"unpinned\":\"unpinned\",\"frozen\":\"frozen\"}});}else{}return;}function detectopofmainfixer(){console.log(\"detectopofmainfixer()\");$(window).scroll(function(){var windowScrolltop=$(this).scrollTop();$intro=$('#intro-area'),introheight=$intro.height(),reached=windowScrolltop-introheight;if(reached>=0){if($('body').hasClass('main-reached')){if($('body').hasClass('nav-on')){}else{unfreezeheadroom();return;}}else{$('body').addClass('main-reached');setTimeout(function(){$('body, html').scrollTop(0);},10);return;}}else if(reached<0){if($('body').hasClass('nav-on')){}else{freezeheadroom();return;}}return;});}function navtogglingfunction(){console.log(\"click\");if(!$('body').not('nav-off')||!$('body').not('nav-on')){destroyheadroom();$('body').addClass('nav-on');console.log(\"not either\");return;}else if($('body').hasClass('nav-on')){console.log(\"turn nav off\");initheadroom();$('body').addClass('nav-off');$('body').removeClass('nav-on');return;}else{console.log(\"turn nav on\");destroyheadroom();$('body').addClass('nav-on');$('body').removeClass('nav-off');var $mainmenuitmes=$('li.menu-item a');$mainmenuitmes.click(function(){console.log(\"$mainmenuitmes.click(function()\");$('body').addClass('nav-off');$('body').removeClass('nav-on');initheadroom();return;});return;}return;}if($('#toggle-item').length>0){console.log(\"if #toggle-item\");if($(\"#header-nav-area\").length>0){$('#header-nav-area').mouseenter(function(){console.log(\"#header-nav-area hover\");if($('body').hasClass('nav-on')){}else{console.log(\"nav not on mouseenter\");forceheadroompin();return;}return;});}var $this=$('#toggle-item');$this.click(function(){navtogglingfunction();return;});initheadroom();detectopofmainfixer();return;}}\n\nvar inpapp={init:function init$$1(){console.log(\"init\");devGrid();SetAppHeight();orientation();detectTouch();init();init$2();menuPositioner();siteLoad();}};domReady(inpapp.init);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]}